{"ast":null,"code":"let browserslist = require('browserslist');\n\nlet {\n  agents\n} = require('caniuse-lite');\n\nlet colorette = require('colorette');\n\nlet Browsers = require('./browsers');\n\nlet Prefixes = require('./prefixes');\n\nlet data = require('../data/prefixes');\n\nlet info = require('./info');\n\nconst WARNING = '\\n' + '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' + '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' + '\\n' + '  Using `browsers` option can cause errors. Browserslist config can\\n' + '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' + '\\n' + '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' + '\\n' + '  Learn more at:\\n' + '  https://github.com/browserslist/browserslist#readme\\n' + '  https://twitter.com/browserslist\\n' + '\\n';\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]';\n}\n\nlet cache = new Map();\n\nfunction timeCapsule(result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return;\n  }\n\n  if (prefixes.add.selectors.length > 0) {\n    return;\n  }\n\n  if (Object.keys(prefixes.add).length > 2) {\n    return;\n  }\n  /* istanbul ignore next */\n\n\n  result.warn('Greetings, time traveller. ' + 'We are in the golden age of prefix-less CSS, ' + 'where Autoprefixer is no longer needed for your stylesheet.');\n}\n\nmodule.exports = (...reqs) => {\n  let options;\n\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0];\n    reqs = undefined;\n  } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {\n    reqs = undefined;\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1];\n    reqs = reqs[0];\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop();\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.browser) {\n    throw new Error('Change `browser` option to `overrideBrowserslist` in Autoprefixer');\n  } else if (options.browserslist) {\n    throw new Error('Change `browserslist` option to `overrideBrowserslist` in Autoprefixer');\n  }\n\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist;\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      if (colorette.red) {\n        console.warn(colorette.red(WARNING.replace(/`[^`]+`/g, i => colorette.yellow(i.slice(1, -1)))));\n      } else {\n        console.warn(WARNING);\n      }\n    }\n\n    reqs = options.browsers;\n  }\n\n  let brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  };\n\n  function loadPrefixes(opts) {\n    let d = module.exports.data;\n    let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);\n    let key = browsers.selected.join(', ') + JSON.stringify(options);\n\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options));\n    }\n\n    return cache.get(key);\n  }\n\n  return {\n    postcssPlugin: 'autoprefixer',\n\n    prepare(result) {\n      let prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      });\n      return {\n        Once(root) {\n          timeCapsule(result, prefixes);\n\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result);\n          }\n\n          if (options.add !== false) {\n            prefixes.processor.add(root, result);\n          }\n        }\n\n      };\n    },\n\n    info(opts) {\n      opts = opts || {};\n      opts.from = opts.from || process.cwd();\n      return info(loadPrefixes(opts));\n    },\n\n    options,\n    browsers: reqs\n  };\n};\n\nmodule.exports.postcss = true;\n/**\n * Autoprefixer data\n */\n\nmodule.exports.data = {\n  browsers: agents,\n  prefixes: data\n};\n/**\n * Autoprefixer default browsers\n */\n\nmodule.exports.defaults = browserslist.defaults;\n/**\n * Inspect with default Autoprefixer\n */\n\nmodule.exports.info = () => module.exports().info();","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/autoprefixer.js"],"names":["browserslist","require","agents","colorette","Browsers","Prefixes","data","info","WARNING","isPlainObject","obj","Object","prototype","toString","apply","cache","Map","timeCapsule","result","prefixes","browsers","selected","length","add","selectors","keys","warn","module","exports","reqs","options","undefined","Array","isArray","pop","browser","Error","overrideBrowserslist","console","red","replace","i","yellow","slice","brwlstOpts","ignoreUnknownVersions","stats","env","loadPrefixes","opts","d","key","join","JSON","stringify","has","set","get","postcssPlugin","prepare","from","Once","root","remove","processor","process","cwd","postcss","defaults"],"mappings":"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","sourcesContent":["let browserslist = require('browserslist')\nlet { agents } = require('caniuse-lite')\nlet colorette = require('colorette')\n\nlet Browsers = require('./browsers')\nlet Prefixes = require('./prefixes')\nlet data = require('../data/prefixes')\nlet info = require('./info')\n\nconst WARNING =\n  '\\n' +\n  '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' +\n  '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' +\n  '\\n' +\n  '  Using `browsers` option can cause errors. Browserslist config can\\n' +\n  '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' +\n  '\\n' +\n  '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' +\n  '\\n' +\n  '  Learn more at:\\n' +\n  '  https://github.com/browserslist/browserslist#readme\\n' +\n  '  https://twitter.com/browserslist\\n' +\n  '\\n'\n\nfunction isPlainObject (obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]'\n}\n\nlet cache = new Map()\n\nfunction timeCapsule (result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return\n  }\n  if (prefixes.add.selectors.length > 0) {\n    return\n  }\n  if (Object.keys(prefixes.add).length > 2) {\n    return\n  }\n\n  /* istanbul ignore next */\n  result.warn(\n    'Greetings, time traveller. ' +\n      'We are in the golden age of prefix-less CSS, ' +\n      'where Autoprefixer is no longer needed for your stylesheet.'\n  )\n}\n\nmodule.exports = (...reqs) => {\n  let options\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0]\n    reqs = undefined\n  } else if (reqs.length === 0 || (reqs.length === 1 && !reqs[0])) {\n    reqs = undefined\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1]\n    reqs = reqs[0]\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop()\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  if (options.browser) {\n    throw new Error(\n      'Change `browser` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  } else if (options.browserslist) {\n    throw new Error(\n      'Change `browserslist` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  }\n\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      if (colorette.red) {\n        console.warn(\n          colorette.red(\n            WARNING.replace(/`[^`]+`/g, i => colorette.yellow(i.slice(1, -1)))\n          )\n        )\n      } else {\n        console.warn(WARNING)\n      }\n    }\n    reqs = options.browsers\n  }\n\n  let brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  }\n\n  function loadPrefixes (opts) {\n    let d = module.exports.data\n    let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts)\n    let key = browsers.selected.join(', ') + JSON.stringify(options)\n\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options))\n    }\n\n    return cache.get(key)\n  }\n\n  return {\n    postcssPlugin: 'autoprefixer',\n\n    prepare (result) {\n      let prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      })\n\n      return {\n        Once (root) {\n          timeCapsule(result, prefixes)\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result)\n          }\n          if (options.add !== false) {\n            prefixes.processor.add(root, result)\n          }\n        }\n      }\n    },\n\n    info (opts) {\n      opts = opts || {}\n      opts.from = opts.from || process.cwd()\n      return info(loadPrefixes(opts))\n    },\n\n    options,\n    browsers: reqs\n  }\n}\n\nmodule.exports.postcss = true\n\n/**\n * Autoprefixer data\n */\nmodule.exports.data = { browsers: agents, prefixes: data }\n\n/**\n * Autoprefixer default browsers\n */\nmodule.exports.defaults = browserslist.defaults\n\n/**\n * Inspect with default Autoprefixer\n */\nmodule.exports.info = () => module.exports().info()\n"]},"metadata":{},"sourceType":"script"}