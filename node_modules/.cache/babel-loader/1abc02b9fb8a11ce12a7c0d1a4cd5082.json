{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\nconst routesConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false\n  },\n  test: {\n    path: \"/test\",\n    component: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 22\n    }, this),\n    routes: {\n      testSentry: {\n        path: \"/test/sentry\",\n        component: () => {\n          const a = {};\n          console.log(a.b.c);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"test Sentry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 18\n          }, this);\n        }\n      }\n    }\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true\n  },\n  noMatch: {\n    path: \"*\",\n    component: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 22\n    }, this),\n    privateRoute: false\n  }\n};\n\nfunction RouteWithSubRoutes(route) {// return (\n  //   <Route\n  //     path={route.path}\n  //     render={() => {\n  //       return !route.privateRoute ? (\n  //         <>\n  //           <route.component component={route.component} />\n  //           {route.routes && (\n  //             <Switch>\n  //               {Object.values(route.routes).map((prop) => (\n  //                 <RouteWithSubRoutes\n  //                   key={prop.path}\n  //                   path={prop.path}\n  //                   component={prop.component}\n  //                   privateRoute={prop.privateRoute}\n  //                   routes={prop.routes}\n  //                 />\n  //               ))}\n  //             </Switch>\n  //           )}\n  //         </>\n  //       ) : (\n  //         <Redirect\n  //           to={{\n  //             pathname: routesConfig.login.path,\n  //             state: { from: route.path },\n  //           }}\n  //         />\n  //       );\n  //     }}\n  //   />\n  // );\n}\n\n_c = RouteWithSubRoutes;\n\nfunction RouteConfig(props, index = 0) {\n  return /*#__PURE__*/_jsxDEV(\"routesConfig\", {\n    path: props.path\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this); // const { authState } = props;\n  // return (\n  //   <Router>\n  //     <Switch>\n  //       {Object.values(routesConfig).map((route) => (\n  //         <RouteWithSubRoutes\n  //           key={route.path}\n  //           path={route.path}\n  //           component={route.component}\n  //           privateRoute={route.privateRoute && !authState.signIn}\n  //           routes={route.routes}\n  //         />\n  //       ))}\n  //     </Switch>\n  //   </Router>\n  // );\n}\n\n_c2 = RouteConfig;\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false\n  }\n};\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool\n  })\n}; // RouteWithSubRoutes.defaultProps = {};\n// RouteWithSubRoutes.propTypes = {};\n\nconst mapStateToProps = state => ({\n  authState: state.authState\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RouteWithSubRoutes\");\n$RefreshReg$(_c2, \"RouteConfig\");","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js"],"names":["React","connect","BrowserRouter","Router","Switch","Route","Redirect","PropTypes","Login","Todos","routesConfig","login","path","component","privateRoute","test","routes","testSentry","a","console","log","b","c","home","noMatch","RouteWithSubRoutes","route","RouteConfig","props","index","defaultProps","authState","signIn","propTypes","exact","bool","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,QAJF,QAKO,kBALP;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,SAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,SAAS,EAAEL,KAFN;AAGLM,IAAAA,YAAY,EAAE;AAHT,GADY;AAMnBC,EAAAA,IAAI,EAAE;AACJH,IAAAA,IAAI,EAAE,OADF;AAEJC,IAAAA,SAAS,EAAE,mBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFb;AAGJG,IAAAA,MAAM,EAAE;AACNC,MAAAA,UAAU,EAAE;AACVL,QAAAA,IAAI,EAAE,cADI;AAEVC,QAAAA,SAAS,EAAE,MAAM;AACf,gBAAMK,CAAC,GAAG,EAAV;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,CAAF,CAAIC,CAAhB;AACA,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;AANS;AADN;AAHJ,GANa;AAoBnBC,EAAAA,IAAI,EAAE;AACJX,IAAAA,IAAI,EAAE,GADF;AAEJC,IAAAA,SAAS,EAAEJ,KAFP;AAGJK,IAAAA,YAAY,EAAE;AAHV,GApBa;AAyBnBU,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IAAI,EAAE,GADC;AAEPC,IAAAA,SAAS,EAAE,mBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFV;AAGPC,IAAAA,YAAY,EAAE;AAHP;AAzBU,CAArB;;AAgCA,SAASW,kBAAT,CAA4BC,KAA5B,EAAmC,CACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;KAjCQD,kB;;AAmCT,SAASE,WAAT,CAAqBC,KAArB,EAA4BC,KAAK,GAAG,CAApC,EAAuC;AACrC,sBAAO;AAAc,IAAA,IAAI,EAAED,KAAK,CAAChB;AAA1B;AAAA;AAAA;AAAA;AAAA,UAAP,CADqC,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;MAlBQe,W;AAoBTA,WAAW,CAACG,YAAZ,GAA2B;AACzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC;AADc,CAA3B;AAMAL,WAAW,CAACM,SAAZ,GAAwB;AACtBF,EAAAA,SAAS,EAAExB,SAAS,CAAC2B,KAAV,CAAgB;AACzBF,IAAAA,MAAM,EAAEzB,SAAS,CAAC4B;AADO,GAAhB;AADW,CAAxB,C,CAMA;AAEA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCN,EAAAA,SAAS,EAAEM,KAAK,CAACN;AADiB,CAAZ,CAAxB;;AAIA,eAAe9B,OAAO,CAACmC,eAAD,CAAP,CAAyBT,WAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\n\nconst routesConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false,\n  },\n  test: {\n    path: \"/test\",\n    component: () => <div>Test</div>,\n    routes: {\n      testSentry: {\n        path: \"/test/sentry\",\n        component: () => {\n          const a = {};\n          console.log(a.b.c);\n          return <div>test Sentry</div>;\n        },\n      },\n    },\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true,\n  },\n  noMatch: {\n    path: \"*\",\n    component: () => <div>No Match</div>,\n    privateRoute: false,\n  },\n};\n\nfunction RouteWithSubRoutes(route) {\n  // return (\n  //   <Route\n  //     path={route.path}\n  //     render={() => {\n  //       return !route.privateRoute ? (\n  //         <>\n  //           <route.component component={route.component} />\n  //           {route.routes && (\n  //             <Switch>\n  //               {Object.values(route.routes).map((prop) => (\n  //                 <RouteWithSubRoutes\n  //                   key={prop.path}\n  //                   path={prop.path}\n  //                   component={prop.component}\n  //                   privateRoute={prop.privateRoute}\n  //                   routes={prop.routes}\n  //                 />\n  //               ))}\n  //             </Switch>\n  //           )}\n  //         </>\n  //       ) : (\n  //         <Redirect\n  //           to={{\n  //             pathname: routesConfig.login.path,\n  //             state: { from: route.path },\n  //           }}\n  //         />\n  //       );\n  //     }}\n  //   />\n  // );\n}\n\nfunction RouteConfig(props, index = 0) {\n  return <routesConfig path={props.path} />;\n  // const { authState } = props;\n  // return (\n  //   <Router>\n  //     <Switch>\n  //       {Object.values(routesConfig).map((route) => (\n  //         <RouteWithSubRoutes\n  //           key={route.path}\n  //           path={route.path}\n  //           component={route.component}\n  //           privateRoute={route.privateRoute && !authState.signIn}\n  //           routes={route.routes}\n  //         />\n  //       ))}\n  //     </Switch>\n  //   </Router>\n  // );\n}\n\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false,\n  },\n};\n\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool,\n  }),\n};\n\n// RouteWithSubRoutes.defaultProps = {};\n\n// RouteWithSubRoutes.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  authState: state.authState,\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n"]},"metadata":{},"sourceType":"module"}