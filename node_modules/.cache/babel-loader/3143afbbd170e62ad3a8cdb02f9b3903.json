{"ast":null,"code":"let Declaration = require('../declaration');\n\nclass GridEnd extends Declaration {\n  /**\n   * Change repeating syntax for IE\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    let clonedDecl = this.clone(decl);\n    let startProp = decl.prop.replace(/end$/, 'start');\n    let spanProp = prefix + decl.prop.replace(/end$/, 'span');\n\n    if (decl.parent.some(i => i.prop === spanProp)) {\n      return undefined;\n    }\n\n    clonedDecl.prop = spanProp;\n\n    if (decl.value.includes('span')) {\n      clonedDecl.value = decl.value.replace(/span\\s/i, '');\n    } else {\n      let startDecl;\n      decl.parent.walkDecls(startProp, d => {\n        startDecl = d;\n      });\n\n      if (startDecl) {\n        let value = Number(decl.value) - Number(startDecl.value) + '';\n        clonedDecl.value = value;\n      } else {\n        decl.warn(result, `Can not prefix ${decl.prop} (${startProp} is not found)`);\n      }\n    }\n\n    decl.cloneBefore(clonedDecl);\n    return undefined;\n  }\n\n}\n\nGridEnd.names = ['grid-row-end', 'grid-column-end'];\nmodule.exports = GridEnd;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/grid-end.js"],"names":["Declaration","require","GridEnd","insert","decl","prefix","prefixes","result","clonedDecl","clone","startProp","prop","replace","spanProp","parent","some","i","undefined","value","includes","startDecl","walkDecls","d","Number","warn","cloneBefore","names","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,MAAMC,OAAN,SAAsBF,WAAtB,CAAkC;AAChC;AACF;AACA;AACEG,EAAAA,MAAM,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACtC,QAAIF,MAAM,KAAK,MAAf,EAAuB,OAAO,MAAMF,MAAN,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAP;AAEvB,QAAIE,UAAU,GAAG,KAAKC,KAAL,CAAWL,IAAX,CAAjB;AAEA,QAAIM,SAAS,GAAGN,IAAI,CAACO,IAAL,CAAUC,OAAV,CAAkB,MAAlB,EAA0B,OAA1B,CAAhB;AACA,QAAIC,QAAQ,GAAGR,MAAM,GAAGD,IAAI,CAACO,IAAL,CAAUC,OAAV,CAAkB,MAAlB,EAA0B,MAA1B,CAAxB;;AAEA,QAAIR,IAAI,CAACU,MAAL,CAAYC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACL,IAAF,KAAWE,QAAjC,CAAJ,EAAgD;AAC9C,aAAOI,SAAP;AACD;;AAEDT,IAAAA,UAAU,CAACG,IAAX,GAAkBE,QAAlB;;AAEA,QAAIT,IAAI,CAACc,KAAL,CAAWC,QAAX,CAAoB,MAApB,CAAJ,EAAiC;AAC/BX,MAAAA,UAAU,CAACU,KAAX,GAAmBd,IAAI,CAACc,KAAL,CAAWN,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAnB;AACD,KAFD,MAEO;AACL,UAAIQ,SAAJ;AACAhB,MAAAA,IAAI,CAACU,MAAL,CAAYO,SAAZ,CAAsBX,SAAtB,EAAiCY,CAAC,IAAI;AACpCF,QAAAA,SAAS,GAAGE,CAAZ;AACD,OAFD;;AAGA,UAAIF,SAAJ,EAAe;AACb,YAAIF,KAAK,GAAGK,MAAM,CAACnB,IAAI,CAACc,KAAN,CAAN,GAAqBK,MAAM,CAACH,SAAS,CAACF,KAAX,CAA3B,GAA+C,EAA3D;AACAV,QAAAA,UAAU,CAACU,KAAX,GAAmBA,KAAnB;AACD,OAHD,MAGO;AACLd,QAAAA,IAAI,CAACoB,IAAL,CACEjB,MADF,EAEG,kBAAiBH,IAAI,CAACO,IAAK,KAAID,SAAU,gBAF5C;AAID;AACF;;AAEDN,IAAAA,IAAI,CAACqB,WAAL,CAAiBjB,UAAjB;AAEA,WAAOS,SAAP;AACD;;AAvC+B;;AA0ClCf,OAAO,CAACwB,KAAR,GAAgB,CAAC,cAAD,EAAiB,iBAAjB,CAAhB;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,OAAjB","sourcesContent":["let Declaration = require('../declaration')\n\nclass GridEnd extends Declaration {\n  /**\n   * Change repeating syntax for IE\n   */\n  insert (decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let clonedDecl = this.clone(decl)\n\n    let startProp = decl.prop.replace(/end$/, 'start')\n    let spanProp = prefix + decl.prop.replace(/end$/, 'span')\n\n    if (decl.parent.some(i => i.prop === spanProp)) {\n      return undefined\n    }\n\n    clonedDecl.prop = spanProp\n\n    if (decl.value.includes('span')) {\n      clonedDecl.value = decl.value.replace(/span\\s/i, '')\n    } else {\n      let startDecl\n      decl.parent.walkDecls(startProp, d => {\n        startDecl = d\n      })\n      if (startDecl) {\n        let value = Number(decl.value) - Number(startDecl.value) + ''\n        clonedDecl.value = value\n      } else {\n        decl.warn(\n          result,\n          `Can not prefix ${decl.prop} (${startProp} is not found)`\n        )\n      }\n    }\n\n    decl.cloneBefore(clonedDecl)\n\n    return undefined\n  }\n}\n\nGridEnd.names = ['grid-row-end', 'grid-column-end']\n\nmodule.exports = GridEnd\n"]},"metadata":{},"sourceType":"script"}