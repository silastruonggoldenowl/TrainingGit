{"ast":null,"code":"let Prefixer = require('./prefixer');\n\nclass AtRule extends Prefixer {\n  /**\n   * Clone and add prefixes for at-rule\n   */\n  add(rule, prefix) {\n    let prefixed = prefix + rule.name;\n    let already = rule.parent.some(i => i.name === prefixed && i.params === rule.params);\n\n    if (already) {\n      return undefined;\n    }\n\n    let cloned = this.clone(rule, {\n      name: prefixed\n    });\n    return rule.parent.insertBefore(rule, cloned);\n  }\n  /**\n   * Clone node with prefixes\n   */\n\n\n  process(node) {\n    let parent = this.parentPrefix(node);\n\n    for (let prefix of this.prefixes) {\n      if (!parent || parent === prefix) {\n        this.add(node, prefix);\n      }\n    }\n  }\n\n}\n\nmodule.exports = AtRule;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/at-rule.js"],"names":["Prefixer","require","AtRule","add","rule","prefix","prefixed","name","already","parent","some","i","params","undefined","cloned","clone","insertBefore","process","node","parentPrefix","prefixes","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,MAAMC,MAAN,SAAqBF,QAArB,CAA8B;AAC5B;AACF;AACA;AACEG,EAAAA,GAAG,CAAEC,IAAF,EAAQC,MAAR,EAAgB;AACjB,QAAIC,QAAQ,GAAGD,MAAM,GAAGD,IAAI,CAACG,IAA7B;AAEA,QAAIC,OAAO,GAAGJ,IAAI,CAACK,MAAL,CAAYC,IAAZ,CACZC,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAWD,QAAX,IAAuBK,CAAC,CAACC,MAAF,KAAaR,IAAI,CAACQ,MADlC,CAAd;;AAGA,QAAIJ,OAAJ,EAAa;AACX,aAAOK,SAAP;AACD;;AAED,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWX,IAAX,EAAiB;AAAEG,MAAAA,IAAI,EAAED;AAAR,KAAjB,CAAb;AACA,WAAOF,IAAI,CAACK,MAAL,CAAYO,YAAZ,CAAyBZ,IAAzB,EAA+BU,MAA/B,CAAP;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,OAAO,CAAEC,IAAF,EAAQ;AACb,QAAIT,MAAM,GAAG,KAAKU,YAAL,CAAkBD,IAAlB,CAAb;;AAEA,SAAK,IAAIb,MAAT,IAAmB,KAAKe,QAAxB,EAAkC;AAChC,UAAI,CAACX,MAAD,IAAWA,MAAM,KAAKJ,MAA1B,EAAkC;AAChC,aAAKF,GAAL,CAASe,IAAT,EAAeb,MAAf;AACD;AACF;AACF;;AA7B2B;;AAgC9BgB,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["let Prefixer = require('./prefixer')\n\nclass AtRule extends Prefixer {\n  /**\n   * Clone and add prefixes for at-rule\n   */\n  add (rule, prefix) {\n    let prefixed = prefix + rule.name\n\n    let already = rule.parent.some(\n      i => i.name === prefixed && i.params === rule.params\n    )\n    if (already) {\n      return undefined\n    }\n\n    let cloned = this.clone(rule, { name: prefixed })\n    return rule.parent.insertBefore(rule, cloned)\n  }\n\n  /**\n   * Clone node with prefixes\n   */\n  process (node) {\n    let parent = this.parentPrefix(node)\n\n    for (let prefix of this.prefixes) {\n      if (!parent || parent === prefix) {\n        this.add(node, prefix)\n      }\n    }\n  }\n}\n\nmodule.exports = AtRule\n"]},"metadata":{},"sourceType":"script"}