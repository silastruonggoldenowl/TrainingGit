{"ast":null,"code":"let flexSpec = require('./flex-spec');\n\nlet Declaration = require('../declaration');\n\nclass FlexDirection extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex-direction';\n  }\n  /**\n   * Use two properties for 2009 spec\n   */\n\n\n  insert(decl, prefix, prefixes) {\n    let spec;\n    [spec, prefix] = flexSpec(prefix);\n\n    if (spec !== 2009) {\n      return super.insert(decl, prefix, prefixes);\n    }\n\n    let already = decl.parent.some(i => i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction');\n\n    if (already) {\n      return undefined;\n    }\n\n    let v = decl.value;\n    let orient, dir;\n\n    if (v === 'inherit' || v === 'initial' || v === 'unset') {\n      orient = v;\n      dir = v;\n    } else {\n      orient = v.includes('row') ? 'horizontal' : 'vertical';\n      dir = v.includes('reverse') ? 'reverse' : 'normal';\n    }\n\n    let cloned = this.clone(decl);\n    cloned.prop = prefix + 'box-orient';\n    cloned.value = orient;\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n\n    decl.parent.insertBefore(decl, cloned);\n    cloned = this.clone(decl);\n    cloned.prop = prefix + 'box-direction';\n    cloned.value = dir;\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n\n    return decl.parent.insertBefore(decl, cloned);\n  }\n  /**\n   * Clean two properties for 2009 spec\n   */\n\n\n  old(prop, prefix) {\n    let spec;\n    [spec, prefix] = flexSpec(prefix);\n\n    if (spec === 2009) {\n      return [prefix + 'box-orient', prefix + 'box-direction'];\n    } else {\n      return super.old(prop, prefix);\n    }\n  }\n\n}\n\nFlexDirection.names = ['flex-direction', 'box-direction', 'box-orient'];\nmodule.exports = FlexDirection;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/flex-direction.js"],"names":["flexSpec","require","Declaration","FlexDirection","normalize","insert","decl","prefix","prefixes","spec","already","parent","some","i","prop","undefined","v","value","orient","dir","includes","cloned","clone","needCascade","raws","before","calcBefore","insertBefore","old","names","module","exports"],"mappings":"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","sourcesContent":["let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexDirection extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize () {\n    return 'flex-direction'\n  }\n\n  /**\n   * Use two properties for 2009 spec\n   */\n  insert (decl, prefix, prefixes) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec !== 2009) {\n      return super.insert(decl, prefix, prefixes)\n    }\n    let already = decl.parent.some(\n      i =>\n        i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'\n    )\n    if (already) {\n      return undefined\n    }\n\n    let v = decl.value\n    let orient, dir\n    if (v === 'inherit' || v === 'initial' || v === 'unset') {\n      orient = v\n      dir = v\n    } else {\n      orient = v.includes('row') ? 'horizontal' : 'vertical'\n      dir = v.includes('reverse') ? 'reverse' : 'normal'\n    }\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-orient'\n    cloned.value = orient\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    decl.parent.insertBefore(decl, cloned)\n\n    cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-direction'\n    cloned.value = dir\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Clean two properties for 2009 spec\n   */\n  old (prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return [prefix + 'box-orient', prefix + 'box-direction']\n    } else {\n      return super.old(prop, prefix)\n    }\n  }\n}\n\nFlexDirection.names = ['flex-direction', 'box-direction', 'box-orient']\n\nmodule.exports = FlexDirection\n"]},"metadata":{},"sourceType":"script"}