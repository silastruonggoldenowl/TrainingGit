{"ast":null,"code":"let flexSpec = require('./flex-spec');\n\nlet OldValue = require('../old-value');\n\nlet Value = require('../value');\n\nclass DisplayFlex extends Value {\n  constructor(name, prefixes) {\n    super(name, prefixes);\n\n    if (name === 'display-flex') {\n      this.name = 'flex';\n    }\n  }\n  /**\n   * Faster check for flex value\n   */\n\n\n  check(decl) {\n    return decl.prop === 'display' && decl.value === this.name;\n  }\n  /**\n   * Return value by spec\n   */\n\n\n  prefixed(prefix) {\n    let spec, value;\n    [spec, prefix] = flexSpec(prefix);\n\n    if (spec === 2009) {\n      if (this.name === 'flex') {\n        value = 'box';\n      } else {\n        value = 'inline-box';\n      }\n    } else if (spec === 2012) {\n      if (this.name === 'flex') {\n        value = 'flexbox';\n      } else {\n        value = 'inline-flexbox';\n      }\n    } else if (spec === 'final') {\n      value = this.name;\n    }\n\n    return prefix + value;\n  }\n  /**\n   * Add prefix to value depend on flebox spec version\n   */\n\n\n  replace(string, prefix) {\n    return this.prefixed(prefix);\n  }\n  /**\n   * Change value for old specs\n   */\n\n\n  old(prefix) {\n    let prefixed = this.prefixed(prefix);\n    if (!prefixed) return undefined;\n    return new OldValue(this.name, prefixed);\n  }\n\n}\n\nDisplayFlex.names = ['display-flex', 'inline-flex'];\nmodule.exports = DisplayFlex;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/display-flex.js"],"names":["flexSpec","require","OldValue","Value","DisplayFlex","constructor","name","prefixes","check","decl","prop","value","prefixed","prefix","spec","replace","string","old","undefined","names","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMG,WAAN,SAA0BD,KAA1B,CAAgC;AAC9BE,EAAAA,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkB;AAC3B,UAAMD,IAAN,EAAYC,QAAZ;;AACA,QAAID,IAAI,KAAK,cAAb,EAA6B;AAC3B,WAAKA,IAAL,GAAY,MAAZ;AACD;AACF;AAED;AACF;AACA;;;AACEE,EAAAA,KAAK,CAAEC,IAAF,EAAQ;AACX,WAAOA,IAAI,CAACC,IAAL,KAAc,SAAd,IAA2BD,IAAI,CAACE,KAAL,KAAe,KAAKL,IAAtD;AACD;AAED;AACF;AACA;;;AACEM,EAAAA,QAAQ,CAAEC,MAAF,EAAU;AAChB,QAAIC,IAAJ,EAAUH,KAAV;AACC,KAACG,IAAD,EAAOD,MAAP,IAAiBb,QAAQ,CAACa,MAAD,CAAzB;;AAED,QAAIC,IAAI,KAAK,IAAb,EAAmB;AACjB,UAAI,KAAKR,IAAL,KAAc,MAAlB,EAA0B;AACxBK,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,GAAG,YAAR;AACD;AACF,KAND,MAMO,IAAIG,IAAI,KAAK,IAAb,EAAmB;AACxB,UAAI,KAAKR,IAAL,KAAc,MAAlB,EAA0B;AACxBK,QAAAA,KAAK,GAAG,SAAR;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,GAAG,gBAAR;AACD;AACF,KANM,MAMA,IAAIG,IAAI,KAAK,OAAb,EAAsB;AAC3BH,MAAAA,KAAK,GAAG,KAAKL,IAAb;AACD;;AAED,WAAOO,MAAM,GAAGF,KAAhB;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,OAAO,CAAEC,MAAF,EAAUH,MAAV,EAAkB;AACvB,WAAO,KAAKD,QAAL,CAAcC,MAAd,CAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,GAAG,CAAEJ,MAAF,EAAU;AACX,QAAID,QAAQ,GAAG,KAAKA,QAAL,CAAcC,MAAd,CAAf;AACA,QAAI,CAACD,QAAL,EAAe,OAAOM,SAAP;AACf,WAAO,IAAIhB,QAAJ,CAAa,KAAKI,IAAlB,EAAwBM,QAAxB,CAAP;AACD;;AAvD6B;;AA0DhCR,WAAW,CAACe,KAAZ,GAAoB,CAAC,cAAD,EAAiB,aAAjB,CAApB;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["let flexSpec = require('./flex-spec')\nlet OldValue = require('../old-value')\nlet Value = require('../value')\n\nclass DisplayFlex extends Value {\n  constructor (name, prefixes) {\n    super(name, prefixes)\n    if (name === 'display-flex') {\n      this.name = 'flex'\n    }\n  }\n\n  /**\n   * Faster check for flex value\n   */\n  check (decl) {\n    return decl.prop === 'display' && decl.value === this.name\n  }\n\n  /**\n   * Return value by spec\n   */\n  prefixed (prefix) {\n    let spec, value\n    ;[spec, prefix] = flexSpec(prefix)\n\n    if (spec === 2009) {\n      if (this.name === 'flex') {\n        value = 'box'\n      } else {\n        value = 'inline-box'\n      }\n    } else if (spec === 2012) {\n      if (this.name === 'flex') {\n        value = 'flexbox'\n      } else {\n        value = 'inline-flexbox'\n      }\n    } else if (spec === 'final') {\n      value = this.name\n    }\n\n    return prefix + value\n  }\n\n  /**\n   * Add prefix to value depend on flebox spec version\n   */\n  replace (string, prefix) {\n    return this.prefixed(prefix)\n  }\n\n  /**\n   * Change value for old specs\n   */\n  old (prefix) {\n    let prefixed = this.prefixed(prefix)\n    if (!prefixed) return undefined\n    return new OldValue(this.name, prefixed)\n  }\n}\n\nDisplayFlex.names = ['display-flex', 'inline-flex']\n\nmodule.exports = DisplayFlex\n"]},"metadata":{},"sourceType":"script"}