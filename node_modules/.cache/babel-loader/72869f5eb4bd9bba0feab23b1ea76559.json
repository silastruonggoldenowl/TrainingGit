{"ast":null,"code":"'use strict';\n\nconst pkgInfo = require('../package.json');\n\nconst helper = require('./helper');\n\nconst Releases = require('./releases');\n/**\n * Interface to and wrapper around the `sentry-cli` executable.\n *\n * Commands are grouped into namespaces. See the respective namespaces for more\n * documentation. To use this wrapper, simply create an instance and call methods:\n *\n * @example\n * const cli = new SentryCli();\n * console.log(cli.getVersion());\n *\n * @example\n * const cli = new SentryCli('path/to/custom/sentry.properties');\n * console.log(cli.getVersion());\n */\n\n\nclass SentryCli {\n  /**\n   * Creates a new `SentryCli` instance.\n   *\n   * If the `configFile` parameter is specified, configuration located in the default\n   * location and the value specified in the `SENTRY_PROPERTIES` environment variable is\n   * overridden.\n   *\n   * @param {string} [configFile] Relative or absolute path to the configuration file.\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  constructor(configFile, options) {\n    if (typeof configFile === 'string') {\n      this.configFile = configFile;\n    }\n\n    this.options = options || {\n      silent: false\n    };\n    this.releases = new Releases({ ...this.options,\n      configFile\n    });\n  }\n  /**\n   * Returns the version of the installed `sentry-cli` binary.\n   * @returns {string}\n   */\n\n\n  static getVersion() {\n    return pkgInfo.version;\n  }\n  /**\n   * Returns an absolute path to the `sentry-cli` binary.\n   * @returns {string}\n   */\n\n\n  static getPath() {\n    return helper.getPath();\n  }\n  /**\n   * See {helper.execute} docs.\n   * @param {string[]} args Command line arguments passed to `sentry-cli`.\n   * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n   * @returns {Promise.<string>} A promise that resolves to the standard output.\n   */\n\n\n  execute(args, live) {\n    return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n  }\n\n}\n\nmodule.exports = SentryCli;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/@sentry/cli/js/index.js"],"names":["pkgInfo","require","helper","Releases","SentryCli","constructor","configFile","options","silent","releases","getVersion","version","getPath","execute","args","live","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,SAAN,CAAgB;AACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;AAC/B,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAKA,UAAL,GAAkBA,UAAlB;AACD;;AACD,SAAKC,OAAL,GAAeA,OAAO,IAAI;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA1B;AACA,SAAKC,QAAL,GAAgB,IAAIN,QAAJ,CAAa,EAAE,GAAG,KAAKI,OAAV;AAAmBD,MAAAA;AAAnB,KAAb,CAAhB;AACD;AAED;AACF;AACA;AACA;;;AACE,SAAOI,UAAP,GAAoB;AAClB,WAAOV,OAAO,CAACW,OAAf;AACD;AAED;AACF;AACA;AACA;;;AACE,SAAOC,OAAP,GAAiB;AACf,WAAOV,MAAM,CAACU,OAAP,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,IAAD,EAAOC,IAAP,EAAa;AAClB,WAAOb,MAAM,CAACW,OAAP,CAAeC,IAAf,EAAqBC,IAArB,EAA2B,KAAKR,OAAL,CAAaC,MAAxC,EAAgD,KAAKF,UAArD,EAAiE,KAAKC,OAAtE,CAAP;AACD;;AA3Ca;;AA8ChBS,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["'use strict';\n\nconst pkgInfo = require('../package.json');\nconst helper = require('./helper');\nconst Releases = require('./releases');\n\n/**\n * Interface to and wrapper around the `sentry-cli` executable.\n *\n * Commands are grouped into namespaces. See the respective namespaces for more\n * documentation. To use this wrapper, simply create an instance and call methods:\n *\n * @example\n * const cli = new SentryCli();\n * console.log(cli.getVersion());\n *\n * @example\n * const cli = new SentryCli('path/to/custom/sentry.properties');\n * console.log(cli.getVersion());\n */\nclass SentryCli {\n  /**\n   * Creates a new `SentryCli` instance.\n   *\n   * If the `configFile` parameter is specified, configuration located in the default\n   * location and the value specified in the `SENTRY_PROPERTIES` environment variable is\n   * overridden.\n   *\n   * @param {string} [configFile] Relative or absolute path to the configuration file.\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  constructor(configFile, options) {\n    if (typeof configFile === 'string') {\n      this.configFile = configFile;\n    }\n    this.options = options || { silent: false };\n    this.releases = new Releases({ ...this.options, configFile });\n  }\n\n  /**\n   * Returns the version of the installed `sentry-cli` binary.\n   * @returns {string}\n   */\n  static getVersion() {\n    return pkgInfo.version;\n  }\n\n  /**\n   * Returns an absolute path to the `sentry-cli` binary.\n   * @returns {string}\n   */\n  static getPath() {\n    return helper.getPath();\n  }\n\n  /**\n   * See {helper.execute} docs.\n   * @param {string[]} args Command line arguments passed to `sentry-cli`.\n   * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n   * @returns {Promise.<string>} A promise that resolves to the standard output.\n   */\n  execute(args, live) {\n    return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n  }\n}\n\nmodule.exports = SentryCli;\n"]},"metadata":{},"sourceType":"script"}