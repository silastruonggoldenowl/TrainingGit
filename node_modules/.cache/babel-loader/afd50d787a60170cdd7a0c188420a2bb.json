{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n/**\n * Absolute path to the sentry-cli binary (platform dependent).\n * @type {string}\n */\n// istanbul ignore next\n\n\nlet binaryPath = path.resolve(__dirname, os.platform() === 'win32' ? '..\\\\sentry-cli.exe' : '../sentry-cli');\n/**\n * Overrides the default binary path with a mock value, useful for testing.\n *\n * @param {string} mockPath The new path to the mock sentry-cli binary\n */\n\nfunction mockBinaryPath(mockPath) {\n  binaryPath = mockPath;\n}\n/**\n * The javascript type of a command line option.\n * @typedef {'array'|'string'|'boolean'|'inverted-boolean'} OptionType\n */\n\n/**\n * Schema definition of a command line option.\n * @typedef {object} OptionSchema\n * @prop {string} param The flag of the command line option including dashes.\n * @prop {OptionType} type The value type of the command line option.\n */\n\n/**\n * Schema definition for a command.\n * @typedef {Object.<string, OptionSchema>} OptionsSchema\n */\n\n/**\n * Serializes command line options into an arguments array.\n *\n * @param {OptionsSchema} schema An options schema required by the command.\n * @param {object} options An options object according to the schema.\n * @returns {string[]} An arguments array that can be passed via command line.\n */\n\n\nfunction serializeOptions(schema, options) {\n  return Object.keys(schema).reduce((newOptions, option) => {\n    const paramValue = options[option];\n\n    if (paramValue === undefined) {\n      return newOptions;\n    }\n\n    const paramType = schema[option].type;\n    const paramName = schema[option].param;\n\n    if (paramType === 'array') {\n      if (!Array.isArray(paramValue)) {\n        throw new Error(`${option} should be an array`);\n      }\n\n      return newOptions.concat(paramValue.reduce((acc, value) => acc.concat([paramName, String(value)]), []));\n    }\n\n    if (paramType === 'boolean') {\n      if (typeof paramValue !== 'boolean') {\n        throw new Error(`${option} should be a bool`);\n      }\n\n      const invertedParamName = schema[option].invertedParam;\n\n      if (paramValue && paramName !== undefined) {\n        return newOptions.concat([paramName]);\n      }\n\n      if (!paramValue && invertedParamName !== undefined) {\n        return newOptions.concat([invertedParamName]);\n      }\n\n      return newOptions;\n    }\n\n    return newOptions.concat(paramName, paramValue);\n  }, []);\n}\n/**\n * Serializes the command and its options into an arguments array.\n *\n * @param {string} command The literal name of the command.\n * @param {OptionsSchema} [schema] An options schema required by the command.\n * @param {object} [options] An options object according to the schema.\n * @returns {string[]} An arguments array that can be passed via command line.\n */\n\n\nfunction prepareCommand(command, schema, options) {\n  return command.concat(serializeOptions(schema || {}, options || {}));\n}\n/**\n * Returns the absolute path to the `sentry-cli` binary.\n * @returns {string}\n */\n\n\nfunction getPath() {\n  return binaryPath;\n}\n/**\n * Runs `sentry-cli` with the given command line arguments.\n *\n * Use {@link prepareCommand} to specify the command and add arguments for command-\n * specific options. For top-level options, use {@link serializeOptions} directly.\n *\n * The returned promise resolves with the standard output of the command invocation\n * including all newlines. In order to parse this output, be sure to trim the output\n * first.\n *\n * If the command failed to execute, the Promise rejects with the error returned by the\n * CLI. This error includes a `code` property with the process exit status.\n *\n * @example\n * const output = await execute(['--version']);\n * expect(output.trim()).toBe('sentry-cli x.y.z');\n *\n * @param {string[]} args Command line arguments passed to `sentry-cli`.\n * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n * @param {boolean} silent Disable stdout for silents build (CI/Webpack Stats, ...)\n * @param {string} [configFile] Relative or absolute path to the configuration file.\n * @param {Object} [config] More configuration to pass to the CLI\n * @returns {Promise.<string>} A promise that resolves to the standard output.\n */\n\n\nfunction execute(args, live, silent, configFile, config = {}) {\n  const env = { ...process.env\n  };\n\n  if (configFile) {\n    env.SENTRY_PROPERTIES = configFile;\n  }\n\n  if (config.url) {\n    env.SENTRY_URL = config.url;\n  }\n\n  if (config.authToken) {\n    env.SENTRY_AUTH_TOKEN = config.authToken;\n  }\n\n  if (config.apiKey) {\n    env.SENTRY_API_KEY = config.apiKey;\n  }\n\n  if (config.dsn) {\n    env.SENTRY_DSN = config.dsn;\n  }\n\n  if (config.org) {\n    env.SENTRY_ORG = config.org;\n  }\n\n  if (config.project) {\n    env.SENTRY_PROJECT = config.project;\n  }\n\n  if (config.vcsRemote) {\n    env.SENTRY_VCS_REMOTE = config.vcsRemote;\n  }\n\n  return new Promise((resolve, reject) => {\n    if (live === true) {\n      const pid = childProcess.spawn(getPath(), args, {\n        env,\n        stdio: ['inherit', silent ? 'pipe' : 'inherit', 'inherit']\n      });\n      pid.on('exit', () => {\n        resolve();\n      });\n    } else {\n      childProcess.execFile(getPath(), args, {\n        env\n      }, (err, stdout) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(stdout);\n        }\n      });\n    }\n  });\n}\n\nfunction getProjectFlagsFromOptions({\n  projects = []\n} = {}) {\n  return projects.reduce((flags, project) => flags.concat('-p', project), []);\n}\n\nmodule.exports = {\n  mockBinaryPath,\n  serializeOptions,\n  prepareCommand,\n  getPath,\n  execute,\n  getProjectFlagsFromOptions\n};","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/@sentry/cli/js/helper.js"],"names":["os","require","path","childProcess","binaryPath","resolve","__dirname","platform","mockBinaryPath","mockPath","serializeOptions","schema","options","Object","keys","reduce","newOptions","option","paramValue","undefined","paramType","type","paramName","param","Array","isArray","Error","concat","acc","value","String","invertedParamName","invertedParam","prepareCommand","command","getPath","execute","args","live","silent","configFile","config","env","process","SENTRY_PROPERTIES","url","SENTRY_URL","authToken","SENTRY_AUTH_TOKEN","apiKey","SENTRY_API_KEY","dsn","SENTRY_DSN","org","SENTRY_ORG","project","SENTRY_PROJECT","vcsRemote","SENTRY_VCS_REMOTE","Promise","reject","pid","spawn","stdio","on","execFile","err","stdout","getProjectFlagsFromOptions","projects","flags","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst childProcess = require('child_process');\n\n/**\n * Absolute path to the sentry-cli binary (platform dependent).\n * @type {string}\n */\n// istanbul ignore next\nlet binaryPath = path.resolve(\n  __dirname,\n\n  os.platform() === 'win32' ? '..\\\\sentry-cli.exe' : '../sentry-cli'\n);\n/**\n * Overrides the default binary path with a mock value, useful for testing.\n *\n * @param {string} mockPath The new path to the mock sentry-cli binary\n */\nfunction mockBinaryPath(mockPath) {\n  binaryPath = mockPath;\n}\n\n/**\n * The javascript type of a command line option.\n * @typedef {'array'|'string'|'boolean'|'inverted-boolean'} OptionType\n */\n\n/**\n * Schema definition of a command line option.\n * @typedef {object} OptionSchema\n * @prop {string} param The flag of the command line option including dashes.\n * @prop {OptionType} type The value type of the command line option.\n */\n\n/**\n * Schema definition for a command.\n * @typedef {Object.<string, OptionSchema>} OptionsSchema\n */\n\n/**\n * Serializes command line options into an arguments array.\n *\n * @param {OptionsSchema} schema An options schema required by the command.\n * @param {object} options An options object according to the schema.\n * @returns {string[]} An arguments array that can be passed via command line.\n */\nfunction serializeOptions(schema, options) {\n  return Object.keys(schema).reduce((newOptions, option) => {\n    const paramValue = options[option];\n    if (paramValue === undefined) {\n      return newOptions;\n    }\n\n    const paramType = schema[option].type;\n    const paramName = schema[option].param;\n\n    if (paramType === 'array') {\n      if (!Array.isArray(paramValue)) {\n        throw new Error(`${option} should be an array`);\n      }\n\n      return newOptions.concat(\n        paramValue.reduce((acc, value) => acc.concat([paramName, String(value)]), [])\n      );\n    }\n\n    if (paramType === 'boolean') {\n      if (typeof paramValue !== 'boolean') {\n        throw new Error(`${option} should be a bool`);\n      }\n\n      const invertedParamName = schema[option].invertedParam;\n\n      if (paramValue && paramName !== undefined) {\n        return newOptions.concat([paramName]);\n      }\n\n      if (!paramValue && invertedParamName !== undefined) {\n        return newOptions.concat([invertedParamName]);\n      }\n\n      return newOptions;\n    }\n\n    return newOptions.concat(paramName, paramValue);\n  }, []);\n}\n\n/**\n * Serializes the command and its options into an arguments array.\n *\n * @param {string} command The literal name of the command.\n * @param {OptionsSchema} [schema] An options schema required by the command.\n * @param {object} [options] An options object according to the schema.\n * @returns {string[]} An arguments array that can be passed via command line.\n */\nfunction prepareCommand(command, schema, options) {\n  return command.concat(serializeOptions(schema || {}, options || {}));\n}\n\n/**\n * Returns the absolute path to the `sentry-cli` binary.\n * @returns {string}\n */\nfunction getPath() {\n  return binaryPath;\n}\n\n/**\n * Runs `sentry-cli` with the given command line arguments.\n *\n * Use {@link prepareCommand} to specify the command and add arguments for command-\n * specific options. For top-level options, use {@link serializeOptions} directly.\n *\n * The returned promise resolves with the standard output of the command invocation\n * including all newlines. In order to parse this output, be sure to trim the output\n * first.\n *\n * If the command failed to execute, the Promise rejects with the error returned by the\n * CLI. This error includes a `code` property with the process exit status.\n *\n * @example\n * const output = await execute(['--version']);\n * expect(output.trim()).toBe('sentry-cli x.y.z');\n *\n * @param {string[]} args Command line arguments passed to `sentry-cli`.\n * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n * @param {boolean} silent Disable stdout for silents build (CI/Webpack Stats, ...)\n * @param {string} [configFile] Relative or absolute path to the configuration file.\n * @param {Object} [config] More configuration to pass to the CLI\n * @returns {Promise.<string>} A promise that resolves to the standard output.\n */\nfunction execute(args, live, silent, configFile, config = {}) {\n  const env = { ...process.env };\n  if (configFile) {\n    env.SENTRY_PROPERTIES = configFile;\n  }\n  if (config.url) {\n    env.SENTRY_URL = config.url;\n  }\n  if (config.authToken) {\n    env.SENTRY_AUTH_TOKEN = config.authToken;\n  }\n  if (config.apiKey) {\n    env.SENTRY_API_KEY = config.apiKey;\n  }\n  if (config.dsn) {\n    env.SENTRY_DSN = config.dsn;\n  }\n  if (config.org) {\n    env.SENTRY_ORG = config.org;\n  }\n  if (config.project) {\n    env.SENTRY_PROJECT = config.project;\n  }\n  if (config.vcsRemote) {\n    env.SENTRY_VCS_REMOTE = config.vcsRemote;\n  }\n  return new Promise((resolve, reject) => {\n    if (live === true) {\n      const pid = childProcess.spawn(getPath(), args, {\n        env,\n        stdio: ['inherit', silent ? 'pipe' : 'inherit', 'inherit'],\n      });\n      pid.on('exit', () => {\n        resolve();\n      });\n    } else {\n      childProcess.execFile(getPath(), args, { env }, (err, stdout) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(stdout);\n        }\n      });\n    }\n  });\n}\n\nfunction getProjectFlagsFromOptions({ projects = [] } = {}) {\n  return projects.reduce((flags, project) => flags.concat('-p', project), []);\n}\n\nmodule.exports = {\n  mockBinaryPath,\n  serializeOptions,\n  prepareCommand,\n  getPath,\n  execute,\n  getProjectFlagsFromOptions,\n};\n"]},"metadata":{},"sourceType":"script"}