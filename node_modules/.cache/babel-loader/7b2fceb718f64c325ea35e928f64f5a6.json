{"ast":null,"code":"let Declaration = require('../declaration');\n\nclass TransformDecl extends Declaration {\n  /**\n   * Recursively check all parents for @keyframes\n   */\n  keyframeParents(decl) {\n    let {\n      parent\n    } = decl;\n\n    while (parent) {\n      if (parent.type === 'atrule' && parent.name === 'keyframes') {\n        return true;\n      }\n\n      ;\n      ({\n        parent\n      } = parent);\n    }\n\n    return false;\n  }\n  /**\n   * Is transform contain 3D commands\n   */\n\n\n  contain3d(decl) {\n    if (decl.prop === 'transform-origin') {\n      return false;\n    }\n\n    for (let func of TransformDecl.functions3d) {\n      if (decl.value.includes(`${func}(`)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Replace rotateZ to rotate for IE 9\n   */\n\n\n  set(decl, prefix) {\n    decl = super.set(decl, prefix);\n\n    if (prefix === '-ms-') {\n      decl.value = decl.value.replace(/rotatez/gi, 'rotate');\n    }\n\n    return decl;\n  }\n  /**\n   * Don't add prefix for IE in keyframes\n   */\n\n\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      if (!this.contain3d(decl) && !this.keyframeParents(decl)) {\n        return super.insert(decl, prefix, prefixes);\n      }\n    } else if (prefix === '-o-') {\n      if (!this.contain3d(decl)) {\n        return super.insert(decl, prefix, prefixes);\n      }\n    } else {\n      return super.insert(decl, prefix, prefixes);\n    }\n\n    return undefined;\n  }\n\n}\n\nTransformDecl.names = ['transform', 'transform-origin'];\nTransformDecl.functions3d = ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'perspective'];\nmodule.exports = TransformDecl;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/transform-decl.js"],"names":["Declaration","require","TransformDecl","keyframeParents","decl","parent","type","name","contain3d","prop","func","functions3d","value","includes","set","prefix","replace","insert","prefixes","undefined","names","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,MAAMC,aAAN,SAA4BF,WAA5B,CAAwC;AACtC;AACF;AACA;AACEG,EAAAA,eAAe,CAAEC,IAAF,EAAQ;AACrB,QAAI;AAAEC,MAAAA;AAAF,QAAaD,IAAjB;;AACA,WAAOC,MAAP,EAAe;AACb,UAAIA,MAAM,CAACC,IAAP,KAAgB,QAAhB,IAA4BD,MAAM,CAACE,IAAP,KAAgB,WAAhD,EAA6D;AAC3D,eAAO,IAAP;AACD;;AACD;AAAC,OAAC;AAAEF,QAAAA;AAAF,UAAaA,MAAd;AACF;;AACD,WAAO,KAAP;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,SAAS,CAAEJ,IAAF,EAAQ;AACf,QAAIA,IAAI,CAACK,IAAL,KAAc,kBAAlB,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,SAAK,IAAIC,IAAT,IAAiBR,aAAa,CAACS,WAA/B,EAA4C;AAC1C,UAAIP,IAAI,CAACQ,KAAL,CAAWC,QAAX,CAAqB,GAAEH,IAAK,GAA5B,CAAJ,EAAqC;AACnC,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,GAAG,CAAEV,IAAF,EAAQW,MAAR,EAAgB;AACjBX,IAAAA,IAAI,GAAG,MAAMU,GAAN,CAAUV,IAAV,EAAgBW,MAAhB,CAAP;;AACA,QAAIA,MAAM,KAAK,MAAf,EAAuB;AACrBX,MAAAA,IAAI,CAACQ,KAAL,GAAaR,IAAI,CAACQ,KAAL,CAAWI,OAAX,CAAmB,WAAnB,EAAgC,QAAhC,CAAb;AACD;;AACD,WAAOZ,IAAP;AACD;AAED;AACF;AACA;;;AACEa,EAAAA,MAAM,CAAEb,IAAF,EAAQW,MAAR,EAAgBG,QAAhB,EAA0B;AAC9B,QAAIH,MAAM,KAAK,MAAf,EAAuB;AACrB,UAAI,CAAC,KAAKP,SAAL,CAAeJ,IAAf,CAAD,IAAyB,CAAC,KAAKD,eAAL,CAAqBC,IAArB,CAA9B,EAA0D;AACxD,eAAO,MAAMa,MAAN,CAAab,IAAb,EAAmBW,MAAnB,EAA2BG,QAA3B,CAAP;AACD;AACF,KAJD,MAIO,IAAIH,MAAM,KAAK,KAAf,EAAsB;AAC3B,UAAI,CAAC,KAAKP,SAAL,CAAeJ,IAAf,CAAL,EAA2B;AACzB,eAAO,MAAMa,MAAN,CAAab,IAAb,EAAmBW,MAAnB,EAA2BG,QAA3B,CAAP;AACD;AACF,KAJM,MAIA;AACL,aAAO,MAAMD,MAAN,CAAab,IAAb,EAAmBW,MAAnB,EAA2BG,QAA3B,CAAP;AACD;;AACD,WAAOC,SAAP;AACD;;AA3DqC;;AA8DxCjB,aAAa,CAACkB,KAAd,GAAsB,CAAC,WAAD,EAAc,kBAAd,CAAtB;AAEAlB,aAAa,CAACS,WAAd,GAA4B,CAC1B,UAD0B,EAE1B,aAF0B,EAG1B,YAH0B,EAI1B,SAJ0B,EAK1B,QAL0B,EAM1B,UAN0B,EAO1B,SAP0B,EAQ1B,SAR0B,EAS1B,aAT0B,CAA5B;AAYAU,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["let Declaration = require('../declaration')\n\nclass TransformDecl extends Declaration {\n  /**\n   * Recursively check all parents for @keyframes\n   */\n  keyframeParents (decl) {\n    let { parent } = decl\n    while (parent) {\n      if (parent.type === 'atrule' && parent.name === 'keyframes') {\n        return true\n      }\n      ;({ parent } = parent)\n    }\n    return false\n  }\n\n  /**\n   * Is transform contain 3D commands\n   */\n  contain3d (decl) {\n    if (decl.prop === 'transform-origin') {\n      return false\n    }\n\n    for (let func of TransformDecl.functions3d) {\n      if (decl.value.includes(`${func}(`)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Replace rotateZ to rotate for IE 9\n   */\n  set (decl, prefix) {\n    decl = super.set(decl, prefix)\n    if (prefix === '-ms-') {\n      decl.value = decl.value.replace(/rotatez/gi, 'rotate')\n    }\n    return decl\n  }\n\n  /**\n   * Don't add prefix for IE in keyframes\n   */\n  insert (decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      if (!this.contain3d(decl) && !this.keyframeParents(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else if (prefix === '-o-') {\n      if (!this.contain3d(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else {\n      return super.insert(decl, prefix, prefixes)\n    }\n    return undefined\n  }\n}\n\nTransformDecl.names = ['transform', 'transform-origin']\n\nTransformDecl.functions3d = [\n  'matrix3d',\n  'translate3d',\n  'translateZ',\n  'scale3d',\n  'scaleZ',\n  'rotate3d',\n  'rotateX',\n  'rotateY',\n  'perspective'\n]\n\nmodule.exports = TransformDecl\n"]},"metadata":{},"sourceType":"script"}