{"ast":null,"code":"let Prefixer = require('./prefixer');\n\nlet OldValue = require('./old-value');\n\nlet vendor = require('./vendor');\n\nlet utils = require('./utils');\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop;\n    let result = [];\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix];\n\n      if (value === decl.value) {\n        continue;\n      }\n\n      let item;\n      let propPrefix = vendor.prefix(prop);\n\n      if (propPrefix === '-pie-') {\n        continue;\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value;\n        result.push(item);\n        continue;\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix);\n      let rule = decl.parent;\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item);\n        continue;\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ');\n      let already = rule.some(i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed);\n\n      if (already) {\n        result.push(item);\n        continue;\n      }\n\n      let cloned = this.clone(decl, {\n        value\n      });\n      item = decl.parent.insertBefore(decl, cloned);\n      result.push(item);\n    }\n\n    return result;\n  }\n  /**\n   * Is declaration need to be prefixed\n   */\n\n\n  check(decl) {\n    let value = decl.value;\n\n    if (!value.includes(this.name)) {\n      return false;\n    }\n\n    return !!value.match(this.regexp());\n  }\n  /**\n   * Lazy regexp loading\n   */\n\n\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n  }\n  /**\n   * Add prefix to values in string\n   */\n\n\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`);\n  }\n  /**\n   * Get value with comments if it was not changed\n   */\n\n\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw;\n    } else {\n      return decl.value;\n    }\n  }\n  /**\n   * Save values with next prefixed token\n   */\n\n\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {};\n    }\n\n    let value = decl._autoprefixerValues[prefix] || this.value(decl);\n    let before;\n\n    do {\n      before = value;\n      value = this.replace(value, prefix);\n      if (value === false) return;\n    } while (value !== before);\n\n    decl._autoprefixerValues[prefix] = value;\n  }\n  /**\n   * Return function to fast find prefixed value\n   */\n\n\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name);\n  }\n\n}\n\nmodule.exports = Value;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/value.js"],"names":["Prefixer","require","OldValue","vendor","utils","Value","save","prefixes","decl","prop","result","prefix","_autoprefixerValues","value","item","propPrefix","push","prefixed","rule","parent","every","i","trimmed","replace","already","some","cloned","clone","insertBefore","check","includes","name","match","regexp","regexpCache","string","raws","raw","add","before","old","module","exports"],"mappings":"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","sourcesContent":["let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save (prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check (decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp () {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace (string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value (decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add (decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old (prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n}\n\nmodule.exports = Value\n"]},"metadata":{},"sourceType":"script"}