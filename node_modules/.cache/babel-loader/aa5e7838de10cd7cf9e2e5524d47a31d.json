{"ast":null,"code":"let parser = require('postcss-value-parser');\n\nlet range = require('normalize-range');\n\nlet OldValue = require('../old-value');\n\nlet Value = require('../value');\n\nlet utils = require('../utils');\n\nlet IS_DIRECTION = /top|left|right|bottom/gi;\n\nclass Gradient extends Value {\n  /**\n   * Change degrees for webkit prefix\n   */\n  replace(string, prefix) {\n    let ast = parser(string);\n\n    for (let node of ast.nodes) {\n      if (node.type === 'function' && node.value === this.name) {\n        node.nodes = this.newDirection(node.nodes);\n        node.nodes = this.normalize(node.nodes);\n\n        if (prefix === '-webkit- old') {\n          let changes = this.oldWebkit(node);\n\n          if (!changes) {\n            return false;\n          }\n        } else {\n          node.nodes = this.convertDirection(node.nodes);\n          node.value = prefix + node.value;\n        }\n      }\n    }\n\n    return ast.toString();\n  }\n  /**\n   * Replace first token\n   */\n\n\n  replaceFirst(params, ...words) {\n    let prefix = words.map(i => {\n      if (i === ' ') {\n        return {\n          type: 'space',\n          value: i\n        };\n      }\n\n      return {\n        type: 'word',\n        value: i\n      };\n    });\n    return prefix.concat(params.slice(1));\n  }\n  /**\n   * Convert angle unit to deg\n   */\n\n\n  normalizeUnit(str, full) {\n    let num = parseFloat(str);\n    let deg = num / full * 360;\n    return `${deg}deg`;\n  }\n  /**\n   * Normalize angle\n   */\n\n\n  normalize(nodes) {\n    if (!nodes[0]) return nodes;\n\n    if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 400);\n    } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);\n    } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 1);\n    } else if (nodes[0].value.includes('deg')) {\n      let num = parseFloat(nodes[0].value);\n      num = range.wrap(0, 360, num);\n      nodes[0].value = `${num}deg`;\n    }\n\n    if (nodes[0].value === '0deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'top');\n    } else if (nodes[0].value === '90deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'right');\n    } else if (nodes[0].value === '180deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom');\n    } else if (nodes[0].value === '270deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'left');\n    }\n\n    return nodes;\n  }\n  /**\n   * Replace old direction to new\n   */\n\n\n  newDirection(params) {\n    if (params[0].value === 'to') {\n      return params;\n    }\n\n    IS_DIRECTION.lastIndex = 0; // reset search index of global regexp\n\n    if (!IS_DIRECTION.test(params[0].value)) {\n      return params;\n    }\n\n    params.unshift({\n      type: 'word',\n      value: 'to'\n    }, {\n      type: 'space',\n      value: ' '\n    });\n\n    for (let i = 2; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        break;\n      }\n\n      if (params[i].type === 'word') {\n        params[i].value = this.revertDirection(params[i].value);\n      }\n    }\n\n    return params;\n  }\n  /**\n   * Look for at word\n   */\n\n\n  isRadial(params) {\n    let state = 'before';\n\n    for (let param of params) {\n      if (state === 'before' && param.type === 'space') {\n        state = 'at';\n      } else if (state === 'at' && param.value === 'at') {\n        state = 'after';\n      } else if (state === 'after' && param.type === 'space') {\n        return true;\n      } else if (param.type === 'div') {\n        break;\n      } else {\n        state = 'before';\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Change new direction to old\n   */\n\n\n  convertDirection(params) {\n    if (params.length > 0) {\n      if (params[0].value === 'to') {\n        this.fixDirection(params);\n      } else if (params[0].value.includes('deg')) {\n        this.fixAngle(params);\n      } else if (this.isRadial(params)) {\n        this.fixRadial(params);\n      }\n    }\n\n    return params;\n  }\n  /**\n   * Replace `to top left` to `bottom right`\n   */\n\n\n  fixDirection(params) {\n    params.splice(0, 2);\n\n    for (let param of params) {\n      if (param.type === 'div') {\n        break;\n      }\n\n      if (param.type === 'word') {\n        param.value = this.revertDirection(param.value);\n      }\n    }\n  }\n  /**\n   * Add 90 degrees\n   */\n\n\n  fixAngle(params) {\n    let first = params[0].value;\n    first = parseFloat(first);\n    first = Math.abs(450 - first) % 360;\n    first = this.roundFloat(first, 3);\n    params[0].value = `${first}deg`;\n  }\n  /**\n   * Fix radial direction syntax\n   */\n\n\n  fixRadial(params) {\n    let first = [];\n    let second = [];\n    let a, b, c, i, next;\n\n    for (i = 0; i < params.length - 2; i++) {\n      a = params[i];\n      b = params[i + 1];\n      c = params[i + 2];\n\n      if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n        next = i + 3;\n        break;\n      } else {\n        first.push(a);\n      }\n    }\n\n    let div;\n\n    for (i = next; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        div = params[i];\n        break;\n      } else {\n        second.push(params[i]);\n      }\n    }\n\n    params.splice(0, i, ...second, div, ...first);\n  }\n\n  revertDirection(word) {\n    return Gradient.directions[word.toLowerCase()] || word;\n  }\n  /**\n   * Round float and save digits under dot\n   */\n\n\n  roundFloat(float, digits) {\n    return parseFloat(float.toFixed(digits));\n  }\n  /**\n   * Convert to old webkit syntax\n   */\n\n\n  oldWebkit(node) {\n    let {\n      nodes\n    } = node;\n    let string = parser.stringify(node.nodes);\n\n    if (this.name !== 'linear-gradient') {\n      return false;\n    }\n\n    if (nodes[0] && nodes[0].value.includes('deg')) {\n      return false;\n    }\n\n    if (string.includes('px') || string.includes('-corner') || string.includes('-side')) {\n      return false;\n    }\n\n    let params = [[]];\n\n    for (let i of nodes) {\n      params[params.length - 1].push(i);\n\n      if (i.type === 'div' && i.value === ',') {\n        params.push([]);\n      }\n    }\n\n    this.oldDirection(params);\n    this.colorStops(params);\n    node.nodes = [];\n\n    for (let param of params) {\n      node.nodes = node.nodes.concat(param);\n    }\n\n    node.nodes.unshift({\n      type: 'word',\n      value: 'linear'\n    }, this.cloneDiv(node.nodes));\n    node.value = '-webkit-gradient';\n    return true;\n  }\n  /**\n   * Change direction syntax to old webkit\n   */\n\n\n  oldDirection(params) {\n    let div = this.cloneDiv(params[0]);\n\n    if (params[0][0].value !== 'to') {\n      return params.unshift([{\n        type: 'word',\n        value: Gradient.oldDirections.bottom\n      }, div]);\n    } else {\n      let words = [];\n\n      for (let node of params[0].slice(2)) {\n        if (node.type === 'word') {\n          words.push(node.value.toLowerCase());\n        }\n      }\n\n      words = words.join(' ');\n      let old = Gradient.oldDirections[words] || words;\n      params[0] = [{\n        type: 'word',\n        value: old\n      }, div];\n      return params[0];\n    }\n  }\n  /**\n   * Get div token from exists parameters\n   */\n\n\n  cloneDiv(params) {\n    for (let i of params) {\n      if (i.type === 'div' && i.value === ',') {\n        return i;\n      }\n    }\n\n    return {\n      type: 'div',\n      value: ',',\n      after: ' '\n    };\n  }\n  /**\n   * Change colors syntax to old webkit\n   */\n\n\n  colorStops(params) {\n    let result = [];\n\n    for (let i = 0; i < params.length; i++) {\n      let pos;\n      let param = params[i];\n      let item;\n\n      if (i === 0) {\n        continue;\n      }\n\n      let color = parser.stringify(param[0]);\n\n      if (param[1] && param[1].type === 'word') {\n        pos = param[1].value;\n      } else if (param[2] && param[2].type === 'word') {\n        pos = param[2].value;\n      }\n\n      let stop;\n\n      if (i === 1 && (!pos || pos === '0%')) {\n        stop = `from(${color})`;\n      } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n        stop = `to(${color})`;\n      } else if (pos) {\n        stop = `color-stop(${pos}, ${color})`;\n      } else {\n        stop = `color-stop(${color})`;\n      }\n\n      let div = param[param.length - 1];\n      params[i] = [{\n        type: 'word',\n        value: stop\n      }];\n\n      if (div.type === 'div' && div.value === ',') {\n        item = params[i].push(div);\n      }\n\n      result.push(item);\n    }\n\n    return result;\n  }\n  /**\n   * Remove old WebKit gradient too\n   */\n\n\n  old(prefix) {\n    if (prefix === '-webkit-') {\n      let type = this.name === 'linear-gradient' ? 'linear' : 'radial';\n      let string = '-gradient';\n      let regexp = utils.regexp(`-webkit-(${type}-gradient|gradient\\\\(\\\\s*${type})`, false);\n      return new OldValue(this.name, prefix + this.name, string, regexp);\n    } else {\n      return super.old(prefix);\n    }\n  }\n  /**\n   * Do not add non-webkit prefixes for list-style and object\n   */\n\n\n  add(decl, prefix) {\n    let p = decl.prop;\n\n    if (p.includes('mask')) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix);\n      }\n    } else if (p === 'list-style' || p === 'list-style-image' || p === 'content') {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix);\n      }\n    } else {\n      return super.add(decl, prefix);\n    }\n\n    return undefined;\n  }\n\n}\n\nGradient.names = ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'];\nGradient.directions = {\n  top: 'bottom',\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n}; // Direction to replace\n\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n};\nmodule.exports = Gradient;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/gradient.js"],"names":["parser","require","range","OldValue","Value","utils","IS_DIRECTION","Gradient","replace","string","prefix","ast","node","nodes","type","value","name","newDirection","normalize","changes","oldWebkit","convertDirection","toString","replaceFirst","params","words","map","i","concat","slice","normalizeUnit","str","full","num","parseFloat","deg","test","Math","PI","includes","wrap","lastIndex","unshift","length","revertDirection","isRadial","state","param","fixDirection","fixAngle","fixRadial","splice","first","abs","roundFloat","second","a","b","c","next","push","div","word","directions","toLowerCase","float","digits","toFixed","stringify","oldDirection","colorStops","cloneDiv","oldDirections","bottom","join","old","after","result","pos","item","color","stop","regexp","add","decl","p","prop","undefined","names","top","left","right","module","exports"],"mappings":"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","sourcesContent":["let parser = require('postcss-value-parser')\nlet range = require('normalize-range')\n\nlet OldValue = require('../old-value')\nlet Value = require('../value')\nlet utils = require('../utils')\n\nlet IS_DIRECTION = /top|left|right|bottom/gi\n\nclass Gradient extends Value {\n  /**\n   * Change degrees for webkit prefix\n   */\n  replace (string, prefix) {\n    let ast = parser(string)\n    for (let node of ast.nodes) {\n      if (node.type === 'function' && node.value === this.name) {\n        node.nodes = this.newDirection(node.nodes)\n        node.nodes = this.normalize(node.nodes)\n        if (prefix === '-webkit- old') {\n          let changes = this.oldWebkit(node)\n          if (!changes) {\n            return false\n          }\n        } else {\n          node.nodes = this.convertDirection(node.nodes)\n          node.value = prefix + node.value\n        }\n      }\n    }\n    return ast.toString()\n  }\n\n  /**\n   * Replace first token\n   */\n  replaceFirst (params, ...words) {\n    let prefix = words.map(i => {\n      if (i === ' ') {\n        return { type: 'space', value: i }\n      }\n      return { type: 'word', value: i }\n    })\n    return prefix.concat(params.slice(1))\n  }\n\n  /**\n   * Convert angle unit to deg\n   */\n  normalizeUnit (str, full) {\n    let num = parseFloat(str)\n    let deg = (num / full) * 360\n    return `${deg}deg`\n  }\n\n  /**\n   * Normalize angle\n   */\n  normalize (nodes) {\n    if (!nodes[0]) return nodes\n\n    if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 400)\n    } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI)\n    } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 1)\n    } else if (nodes[0].value.includes('deg')) {\n      let num = parseFloat(nodes[0].value)\n      num = range.wrap(0, 360, num)\n      nodes[0].value = `${num}deg`\n    }\n\n    if (nodes[0].value === '0deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'top')\n    } else if (nodes[0].value === '90deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'right')\n    } else if (nodes[0].value === '180deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom')\n    } else if (nodes[0].value === '270deg') {\n      nodes = this.replaceFirst(nodes, 'to', ' ', 'left')\n    }\n\n    return nodes\n  }\n\n  /**\n   * Replace old direction to new\n   */\n  newDirection (params) {\n    if (params[0].value === 'to') {\n      return params\n    }\n    IS_DIRECTION.lastIndex = 0 // reset search index of global regexp\n    if (!IS_DIRECTION.test(params[0].value)) {\n      return params\n    }\n\n    params.unshift(\n      {\n        type: 'word',\n        value: 'to'\n      },\n      {\n        type: 'space',\n        value: ' '\n      }\n    )\n\n    for (let i = 2; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        break\n      }\n      if (params[i].type === 'word') {\n        params[i].value = this.revertDirection(params[i].value)\n      }\n    }\n\n    return params\n  }\n\n  /**\n   * Look for at word\n   */\n  isRadial (params) {\n    let state = 'before'\n    for (let param of params) {\n      if (state === 'before' && param.type === 'space') {\n        state = 'at'\n      } else if (state === 'at' && param.value === 'at') {\n        state = 'after'\n      } else if (state === 'after' && param.type === 'space') {\n        return true\n      } else if (param.type === 'div') {\n        break\n      } else {\n        state = 'before'\n      }\n    }\n    return false\n  }\n\n  /**\n   * Change new direction to old\n   */\n  convertDirection (params) {\n    if (params.length > 0) {\n      if (params[0].value === 'to') {\n        this.fixDirection(params)\n      } else if (params[0].value.includes('deg')) {\n        this.fixAngle(params)\n      } else if (this.isRadial(params)) {\n        this.fixRadial(params)\n      }\n    }\n    return params\n  }\n\n  /**\n   * Replace `to top left` to `bottom right`\n   */\n  fixDirection (params) {\n    params.splice(0, 2)\n\n    for (let param of params) {\n      if (param.type === 'div') {\n        break\n      }\n      if (param.type === 'word') {\n        param.value = this.revertDirection(param.value)\n      }\n    }\n  }\n\n  /**\n   * Add 90 degrees\n   */\n  fixAngle (params) {\n    let first = params[0].value\n    first = parseFloat(first)\n    first = Math.abs(450 - first) % 360\n    first = this.roundFloat(first, 3)\n    params[0].value = `${first}deg`\n  }\n\n  /**\n   * Fix radial direction syntax\n   */\n  fixRadial (params) {\n    let first = []\n    let second = []\n    let a, b, c, i, next\n\n    for (i = 0; i < params.length - 2; i++) {\n      a = params[i]\n      b = params[i + 1]\n      c = params[i + 2]\n      if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n        next = i + 3\n        break\n      } else {\n        first.push(a)\n      }\n    }\n\n    let div\n    for (i = next; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        div = params[i]\n        break\n      } else {\n        second.push(params[i])\n      }\n    }\n\n    params.splice(0, i, ...second, div, ...first)\n  }\n\n  revertDirection (word) {\n    return Gradient.directions[word.toLowerCase()] || word\n  }\n\n  /**\n   * Round float and save digits under dot\n   */\n  roundFloat (float, digits) {\n    return parseFloat(float.toFixed(digits))\n  }\n\n  /**\n   * Convert to old webkit syntax\n   */\n  oldWebkit (node) {\n    let { nodes } = node\n    let string = parser.stringify(node.nodes)\n\n    if (this.name !== 'linear-gradient') {\n      return false\n    }\n    if (nodes[0] && nodes[0].value.includes('deg')) {\n      return false\n    }\n    if (\n      string.includes('px') ||\n      string.includes('-corner') ||\n      string.includes('-side')\n    ) {\n      return false\n    }\n\n    let params = [[]]\n    for (let i of nodes) {\n      params[params.length - 1].push(i)\n      if (i.type === 'div' && i.value === ',') {\n        params.push([])\n      }\n    }\n\n    this.oldDirection(params)\n    this.colorStops(params)\n\n    node.nodes = []\n    for (let param of params) {\n      node.nodes = node.nodes.concat(param)\n    }\n\n    node.nodes.unshift(\n      { type: 'word', value: 'linear' },\n      this.cloneDiv(node.nodes)\n    )\n    node.value = '-webkit-gradient'\n\n    return true\n  }\n\n  /**\n   * Change direction syntax to old webkit\n   */\n  oldDirection (params) {\n    let div = this.cloneDiv(params[0])\n\n    if (params[0][0].value !== 'to') {\n      return params.unshift([\n        { type: 'word', value: Gradient.oldDirections.bottom },\n        div\n      ])\n    } else {\n      let words = []\n      for (let node of params[0].slice(2)) {\n        if (node.type === 'word') {\n          words.push(node.value.toLowerCase())\n        }\n      }\n\n      words = words.join(' ')\n      let old = Gradient.oldDirections[words] || words\n\n      params[0] = [{ type: 'word', value: old }, div]\n      return params[0]\n    }\n  }\n\n  /**\n   * Get div token from exists parameters\n   */\n  cloneDiv (params) {\n    for (let i of params) {\n      if (i.type === 'div' && i.value === ',') {\n        return i\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  /**\n   * Change colors syntax to old webkit\n   */\n  colorStops (params) {\n    let result = []\n    for (let i = 0; i < params.length; i++) {\n      let pos\n      let param = params[i]\n      let item\n      if (i === 0) {\n        continue\n      }\n\n      let color = parser.stringify(param[0])\n      if (param[1] && param[1].type === 'word') {\n        pos = param[1].value\n      } else if (param[2] && param[2].type === 'word') {\n        pos = param[2].value\n      }\n\n      let stop\n      if (i === 1 && (!pos || pos === '0%')) {\n        stop = `from(${color})`\n      } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n        stop = `to(${color})`\n      } else if (pos) {\n        stop = `color-stop(${pos}, ${color})`\n      } else {\n        stop = `color-stop(${color})`\n      }\n\n      let div = param[param.length - 1]\n      params[i] = [{ type: 'word', value: stop }]\n      if (div.type === 'div' && div.value === ',') {\n        item = params[i].push(div)\n      }\n      result.push(item)\n    }\n    return result\n  }\n\n  /**\n   * Remove old WebKit gradient too\n   */\n  old (prefix) {\n    if (prefix === '-webkit-') {\n      let type = this.name === 'linear-gradient' ? 'linear' : 'radial'\n      let string = '-gradient'\n      let regexp = utils.regexp(\n        `-webkit-(${type}-gradient|gradient\\\\(\\\\s*${type})`,\n        false\n      )\n\n      return new OldValue(this.name, prefix + this.name, string, regexp)\n    } else {\n      return super.old(prefix)\n    }\n  }\n\n  /**\n   * Do not add non-webkit prefixes for list-style and object\n   */\n  add (decl, prefix) {\n    let p = decl.prop\n    if (p.includes('mask')) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else if (\n      p === 'list-style' ||\n      p === 'list-style-image' ||\n      p === 'content'\n    ) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else {\n      return super.add(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nGradient.names = [\n  'linear-gradient',\n  'repeating-linear-gradient',\n  'radial-gradient',\n  'repeating-radial-gradient'\n]\n\nGradient.directions = {\n  top: 'bottom',\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n}\n\n// Direction to replace\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n}\n\nmodule.exports = Gradient\n"]},"metadata":{},"sourceType":"script"}