{"ast":null,"code":"let browserslist = require('browserslist');\n\nlet agents = require('caniuse-lite').agents;\n\nlet utils = require('./utils');\n\nclass Browsers {\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache;\n    }\n\n    this.prefixesCache = [];\n\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`);\n    }\n\n    this.prefixesCache = utils.uniq(this.prefixesCache).sort((a, b) => b.length - a.length);\n    return this.prefixesCache;\n  }\n  /**\n   * Check is value contain any possible prefix\n   */\n\n\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'));\n    }\n\n    return this.prefixesRegexp.test(value);\n  }\n\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data;\n    this.options = options || {};\n    this.browserslistOpts = browserslistOpts || {};\n    this.selected = this.parse(requirements);\n  }\n  /**\n   * Return browsers selected by requirements\n   */\n\n\n  parse(requirements) {\n    let opts = {};\n\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i];\n    }\n\n    opts.path = this.options.from;\n    return browserslist(requirements, opts);\n  }\n  /**\n   * Return prefix for selected browser\n   */\n\n\n  prefix(browser) {\n    let [name, version] = browser.split(' ');\n    let data = this.data[name];\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version];\n\n    if (!prefix) {\n      prefix = data.prefix;\n    }\n\n    return `-${prefix}-`;\n  }\n  /**\n   * Is browser is selected by requirements\n   */\n\n\n  isSelected(browser) {\n    return this.selected.includes(browser);\n  }\n\n}\n\nmodule.exports = Browsers;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/browsers.js"],"names":["browserslist","require","agents","utils","Browsers","prefixes","prefixesCache","name","push","prefix","uniq","sort","a","b","length","withPrefix","value","prefixesRegexp","RegExp","join","test","constructor","data","requirements","options","browserslistOpts","selected","parse","opts","i","path","from","browser","version","split","prefix_exceptions","isSelected","includes","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,MAArC;;AAEA,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,MAAMG,QAAN,CAAe;AACb;AACF;AACA;AACE,SAAOC,QAAP,GAAmB;AACjB,QAAI,KAAKC,aAAT,EAAwB;AACtB,aAAO,KAAKA,aAAZ;AACD;;AAED,SAAKA,aAAL,GAAqB,EAArB;;AACA,SAAK,IAAIC,IAAT,IAAiBL,MAAjB,EAAyB;AACvB,WAAKI,aAAL,CAAmBE,IAAnB,CAAyB,IAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAO,GAAhD;AACD;;AAED,SAAKH,aAAL,GAAqBH,KAAK,CACvBO,IADkB,CACb,KAAKJ,aADQ,EAElBK,IAFkB,CAEb,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,MAAF,GAAWF,CAAC,CAACE,MAFV,CAArB;AAIA,WAAO,KAAKR,aAAZ;AACD;AAED;AACF;AACA;;;AACE,SAAOS,UAAP,CAAmBC,KAAnB,EAA0B;AACxB,QAAI,CAAC,KAAKC,cAAV,EAA0B;AACxB,WAAKA,cAAL,GAAsB,IAAIC,MAAJ,CAAW,KAAKb,QAAL,GAAgBc,IAAhB,CAAqB,GAArB,CAAX,CAAtB;AACD;;AAED,WAAO,KAAKF,cAAL,CAAoBG,IAApB,CAAyBJ,KAAzB,CAAP;AACD;;AAEDK,EAAAA,WAAW,CAAEC,IAAF,EAAQC,YAAR,EAAsBC,OAAtB,EAA+BC,gBAA/B,EAAiD;AAC1D,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKE,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,SAAKC,gBAAL,GAAwBA,gBAAgB,IAAI,EAA5C;AACA,SAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWJ,YAAX,CAAhB;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,KAAK,CAAEJ,YAAF,EAAgB;AACnB,QAAIK,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAT,IAAc,KAAKJ,gBAAnB,EAAqC;AACnCG,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAU,KAAKJ,gBAAL,CAAsBI,CAAtB,CAAV;AACD;;AACDD,IAAAA,IAAI,CAACE,IAAL,GAAY,KAAKN,OAAL,CAAaO,IAAzB;AACA,WAAO/B,YAAY,CAACuB,YAAD,EAAeK,IAAf,CAAnB;AACD;AAED;AACF;AACA;;;AACEnB,EAAAA,MAAM,CAAEuB,OAAF,EAAW;AACf,QAAI,CAACzB,IAAD,EAAO0B,OAAP,IAAkBD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAtB;AACA,QAAIZ,IAAI,GAAG,KAAKA,IAAL,CAAUf,IAAV,CAAX;AAEA,QAAIE,MAAM,GAAGa,IAAI,CAACa,iBAAL,IAA0Bb,IAAI,CAACa,iBAAL,CAAuBF,OAAvB,CAAvC;;AACA,QAAI,CAACxB,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAGa,IAAI,CAACb,MAAd;AACD;;AACD,WAAQ,IAAGA,MAAO,GAAlB;AACD;AAED;AACF;AACA;;;AACE2B,EAAAA,UAAU,CAAEJ,OAAF,EAAW;AACnB,WAAO,KAAKN,QAAL,CAAcW,QAAd,CAAuBL,OAAvB,CAAP;AACD;;AAtEY;;AAyEfM,MAAM,CAACC,OAAP,GAAiBnC,QAAjB","sourcesContent":["let browserslist = require('browserslist')\nlet agents = require('caniuse-lite').agents\n\nlet utils = require('./utils')\n\nclass Browsers {\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes () {\n    if (this.prefixesCache) {\n      return this.prefixesCache\n    }\n\n    this.prefixesCache = []\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`)\n    }\n\n    this.prefixesCache = utils\n      .uniq(this.prefixesCache)\n      .sort((a, b) => b.length - a.length)\n\n    return this.prefixesCache\n  }\n\n  /**\n   * Check is value contain any possible prefix\n   */\n  static withPrefix (value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'))\n    }\n\n    return this.prefixesRegexp.test(value)\n  }\n\n  constructor (data, requirements, options, browserslistOpts) {\n    this.data = data\n    this.options = options || {}\n    this.browserslistOpts = browserslistOpts || {}\n    this.selected = this.parse(requirements)\n  }\n\n  /**\n   * Return browsers selected by requirements\n   */\n  parse (requirements) {\n    let opts = {}\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i]\n    }\n    opts.path = this.options.from\n    return browserslist(requirements, opts)\n  }\n\n  /**\n   * Return prefix for selected browser\n   */\n  prefix (browser) {\n    let [name, version] = browser.split(' ')\n    let data = this.data[name]\n\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version]\n    if (!prefix) {\n      prefix = data.prefix\n    }\n    return `-${prefix}-`\n  }\n\n  /**\n   * Is browser is selected by requirements\n   */\n  isSelected (browser) {\n    return this.selected.includes(browser)\n  }\n}\n\nmodule.exports = Browsers\n"]},"metadata":{},"sourceType":"script"}