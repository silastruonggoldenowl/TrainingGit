{"ast":null,"code":"function last(array) {\n  return array[array.length - 1];\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = [''];\n    let stack = [current];\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = '';\n\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`;\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n\n};\nmodule.exports = brackets;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/brackets.js"],"names":["last","array","length","brackets","parse","str","current","stack","sym","push","pop","stringify","ast","result","i","module","exports"],"mappings":"AAAA,SAASA,IAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,IAAIC,QAAQ,GAAG;AACb;AACF;AACA;AACEC,EAAAA,KAAK,CAAEC,GAAF,EAAO;AACV,QAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;AACA,QAAIC,KAAK,GAAG,CAACD,OAAD,CAAZ;;AAEA,SAAK,IAAIE,GAAT,IAAgBH,GAAhB,EAAqB;AACnB,UAAIG,GAAG,KAAK,GAAZ,EAAiB;AACfF,QAAAA,OAAO,GAAG,CAAC,EAAD,CAAV;AACAN,QAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYE,IAAZ,CAAiBH,OAAjB;AACAC,QAAAA,KAAK,CAACE,IAAN,CAAWH,OAAX;AACA;AACD;;AAED,UAAIE,GAAG,KAAK,GAAZ,EAAiB;AACfD,QAAAA,KAAK,CAACG,GAAN;AACAJ,QAAAA,OAAO,GAAGN,IAAI,CAACO,KAAD,CAAd;AACAD,QAAAA,OAAO,CAACG,IAAR,CAAa,EAAb;AACA;AACD;;AAEDH,MAAAA,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,IAA+BM,GAA/B;AACD;;AAED,WAAOD,KAAK,CAAC,CAAD,CAAZ;AACD,GA3BY;;AA6Bb;AACF;AACA;AACEI,EAAAA,SAAS,CAAEC,GAAF,EAAO;AACd,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACjB,UAAI,OAAOE,CAAP,KAAa,QAAjB,EAA2B;AACzBD,QAAAA,MAAM,IAAK,IAAGV,QAAQ,CAACQ,SAAT,CAAmBG,CAAnB,CAAsB,GAApC;AACA;AACD;;AAEDD,MAAAA,MAAM,IAAIC,CAAV;AACD;;AACD,WAAOD,MAAP;AACD;;AA3CY,CAAf;AA8CAE,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["function last (array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse (str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify (ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n"]},"metadata":{},"sourceType":"script"}