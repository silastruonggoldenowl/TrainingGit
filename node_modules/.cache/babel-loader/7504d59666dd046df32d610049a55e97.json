{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\nconst routesConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true\n  },\n  test: {\n    path: \"/test\",\n    component: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Test\"\n    }, void 0, false),\n    routes: {\n      testSentry: \"/test/sentry\",\n      component: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"test Sentry\"\n      }, void 0, false)\n    }\n  },\n  noMatch: {\n    path: \"*\",\n    component: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"No Match\"\n    }, void 0, false),\n    privateRoute: false\n  }\n};\n\nfunction RouteWithSubRoutes(route) {\n  // console.log(route);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: route.path,\n    render: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(route.component, {\n        component: route.component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), route.routes && /*#__PURE__*/_jsxDEV(Switch, {\n        children: Object.values(route.routes).map(prop => /*#__PURE__*/_jsxDEV(RouteWithSubRoutes, {\n          path: prop.path,\n          component: prop.component,\n          privateRoute: prop.privateRoute,\n          routes: prop.routes\n        }, prop.path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RouteWithSubRoutes;\n\nfunction RouteConfig(props) {\n  const {\n    authState\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: Object.values(routesConfig).map(route => /*#__PURE__*/_jsxDEV(RouteWithSubRoutes, {\n        path: route.path,\n        component: route.component,\n        privateRoute: route.privateRoute && authState.signIn,\n        routes: route.routes\n      }, route.path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = RouteConfig;\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false\n  }\n};\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool\n  })\n};\nRouteWithSubRoutes.defaultProps = {};\nRouteWithSubRoutes.propTypes = {};\n\nconst mapStateToProps = state => ({\n  authState: state.authState\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RouteWithSubRoutes\");\n$RefreshReg$(_c2, \"RouteConfig\");","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js"],"names":["React","connect","BrowserRouter","Router","Switch","Route","Redirect","PropTypes","Login","Todos","routesConfig","login","path","component","privateRoute","home","test","routes","testSentry","noMatch","RouteWithSubRoutes","route","Object","values","map","prop","RouteConfig","props","authState","signIn","defaultProps","propTypes","exact","bool","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\n\nconst routesConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false,\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true,\n  },\n  test: {\n    path: \"/test\",\n    component: <>Test</>,\n    routes: {\n      testSentry: \"/test/sentry\",\n      component: <>test Sentry</>,\n    },\n  },\n  noMatch: {\n    path: \"*\",\n    component: <>No Match</>,\n    privateRoute: false,\n  },\n};\n\nfunction RouteWithSubRoutes(route) {\n  // console.log(route);\n  return (\n    <Route\n      path={route.path}\n      render={() => (\n        <>\n          <route.component component={route.component} />\n          {route.routes && (\n            <Switch>\n              {Object.values(route.routes).map((prop) => (\n                <RouteWithSubRoutes\n                  key={prop.path}\n                  path={prop.path}\n                  component={prop.component}\n                  privateRoute={prop.privateRoute}\n                  routes={prop.routes}\n                />\n              ))}\n            </Switch>\n          )}\n        </>\n      )}\n    />\n  );\n}\n\nfunction RouteConfig(props) {\n  const { authState } = props;\n  return (\n    <Router>\n      <Switch>\n        {Object.values(routesConfig).map((route) => (\n          <RouteWithSubRoutes\n            key={route.path}\n            path={route.path}\n            component={route.component}\n            privateRoute={route.privateRoute && authState.signIn}\n            routes={route.routes}\n          />\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false,\n  },\n};\n\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool,\n  }),\n};\n\nRouteWithSubRoutes.defaultProps = {};\n\nRouteWithSubRoutes.propTypes = {};\n\nconst mapStateToProps = (state) => ({\n  authState: state.authState,\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n"]},"metadata":{},"sourceType":"module"}