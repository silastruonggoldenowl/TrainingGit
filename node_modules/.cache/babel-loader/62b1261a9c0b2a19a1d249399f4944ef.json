{"ast":null,"code":"let parser = require('postcss-value-parser');\n\nlet list = require('postcss').list;\n\nlet uniq = require('../utils').uniq;\n\nlet escapeRegexp = require('../utils').escapeRegexp;\n\nlet splitSelector = require('../utils').splitSelector;\n\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n\n  return [false, false];\n}\n\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex];\n  let endValue = values[endIndex];\n\n  if (!startValue) {\n    return [false, false];\n  }\n\n  let [start, spanStart] = convert(startValue);\n  let [end, spanEnd] = convert(endValue);\n\n  if (start && !endValue) {\n    return [start, false];\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n\n  if (start && end) {\n    return [start, end - start];\n  }\n\n  return [false, false];\n}\n\nfunction parse(decl) {\n  let node = parser(decl.value);\n  let values = [];\n  let current = 0;\n  values[current] = [];\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n\n  return values;\n}\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    });\n  }\n} // Track transforms\n\n\nfunction prefixTrackProp({\n  prop,\n  prefix\n}) {\n  return prefix + prop.replace('template-', '');\n}\n\nfunction transformRepeat({\n  nodes\n}, {\n  gap\n}) {\n  let {\n    count,\n    size\n  } = nodes.reduce((result, node) => {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    return result;\n  }, {\n    key: 'count',\n    size: [],\n    count: []\n  }); // insert gap values\n\n  if (gap) {\n    size = size.filter(i => i.trim());\n    let val = [];\n\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap);\n        }\n\n        val.push(item);\n      });\n    }\n\n    return val.join(' ');\n  }\n\n  return `(${size.join('')})[${count.join('')}]`;\n}\n\nfunction prefixTrackValue({\n  value,\n  gap\n}) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap\n        })\n      });\n    }\n\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n} // Parse grid-template-areas\n\n\nlet DOTS = /^\\.+$/;\n\nfunction track(start, end) {\n  return {\n    start,\n    end,\n    span: end - start\n  };\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\n\nfunction parseGridAreas({\n  rows,\n  gap\n}) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        let {\n          column,\n          row\n        } = areas[area];\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n} // Parse grid-template\n\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value);\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n\n  return result;\n}\n\nfunction parseTemplate({\n  decl,\n  gap\n}) {\n  let gridTemplate = parser(decl.value).nodes.reduce((result, node) => {\n    let {\n      type,\n      value\n    } = node;\n    if (testTrack(node) || type === 'space') return result; // area\n\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    } // values and function\n\n\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    } // divider(/)\n\n\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n\n    return result;\n  }, {\n    key: 'rows',\n    columns: [],\n    rows: [],\n    areas: []\n  });\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  };\n} // Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\n\n\nfunction getMSDecls(area, addRowSpan = false, addColumnSpan = false) {\n  let result = [{\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }];\n\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    });\n  }\n\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  });\n\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    });\n  }\n\n  return result;\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n\n  if (!parent.parent) {\n    return false;\n  }\n\n  return getParentMedia(parent.parent);\n}\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\n\n\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector);\n    let selectorByComma = list.comma(selector);\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n\n    return selector;\n  });\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' ';\n      return `${space}${tplSelector} > ${ruleSelector}`;\n    });\n    return newSelector;\n  });\n}\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\n\n\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.some(s => s === sel);\n  });\n}\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\n\n\nfunction parseGridTemplatesData(css) {\n  let parsed = []; // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent;\n    let media = getParentMedia(rule);\n    let gap = getGridGap(d);\n    let inheritedGap = inheritGridGap(d, gap);\n    let {\n      areas\n    } = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    });\n    let areaNames = Object.keys(areas); // skip node if it doesn't have areas\n\n    if (areaNames.length === 0) {\n      return true;\n    } // check parsed array for item that include the same area names\n    // return index of that item\n\n\n    let index = parsed.reduce((acc, {\n      allAreas\n    }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area));\n      return hasAreas ? idx : acc;\n    }, null);\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let {\n        allAreas,\n        rules\n      } = parsed[index]; // check if rule has no duplicate area names\n\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      let duplicatesFound = false; // check need to gather all duplicate area names\n\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n\n        return uniq(acc);\n      }, []); // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name];\n\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames]);\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames,\n        areas\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          hasDuplicates: false,\n          duplicateRules: [],\n          params: media.params,\n          selectors: rule.selectors,\n          node: rule,\n          duplicateAreaNames: [],\n          areas\n        }]\n      });\n    }\n\n    return undefined;\n  });\n  return parsed;\n}\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\n\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css); // return undefined if no declarations found\n\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  } // we need to store the rules that we will insert later\n\n\n  let rulesToInsert = {};\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent;\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    let gridAreaMedia = getParentMedia(gridAreaRule);\n\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);\n    let value = gridArea.value; // found the data that matches grid-area identifier\n\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0];\n\n    if (!data) {\n      return true;\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1];\n    let selectorBySpace = list.space(gridAreaRule.selector);\n    let selectorByComma = list.comma(gridAreaRule.selector);\n    let selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length; // prevent doubling of prefixes\n\n    if (hasPrefixedRow) {\n      return false;\n    } // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n\n\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    }\n\n    let lastRuleIsSet = false; // walk through every grid-template rule data\n\n    for (let rule of data.rules) {\n      let area = rule.areas[value];\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value); // if we can't find the area name, update lastRule and continue\n\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule;\n        let lastRuleIndex;\n\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule);\n        } else {\n          /* istanbul ignore next */\n          lastRuleIndex = -1;\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n\n        continue;\n      } // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n\n\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n        getMSDecls(area, false, false).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned);\n        }\n\n        rulesToInsert[lastArea].lastRule = cloned;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove());\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n        }\n\n        cloned.raws = rule.node.raws;\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned);\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned);\n        } // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n\n\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n      }\n    }\n\n    return undefined;\n  }); // append stored rules inside the media rules\n\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area];\n    let lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(p => p !== 'lastRule').forEach(params => {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value);\n  });\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n\n  return undefined;\n}\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent;\n  let root = decl.root();\n  let duplicatesFound = false; // slice selector array. Remove the last part (for comparison)\n\n  let slicedSelectorArr = list.space(rule.selector).filter(str => str !== '>').slice(0, -1); // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false;\n    let foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent;\n      let templateSelectors = parent.selectors;\n      let {\n        areas\n      } = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      });\n      let hasArea = areas[decl.value]; // find the the matching selectors\n\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break;\n        }\n\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>');\n        gridTemplateFound = tplSelectorArr.every((item, idx) => item === slicedSelectorArr[idx]);\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      } // if we found the duplicate area with different selector\n\n\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n\n      return undefined;\n    }); // warn user if we didn't find template\n\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, 'Autoprefixer cannot find a grid-template ' + `containing the duplicate grid-area \"${decl.value}\" ` + `with full selector matching: ${slicedSelectorArr.join(' ')}`);\n    }\n  }\n}\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent;\n  let decls = [];\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (!d.prop.endsWith('-end') && !d.value.startsWith('span') && !d.prop.endsWith('-gap')) {\n      decls.push(d);\n    }\n  });\n\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(result, 'You already have a grid-area declaration present in the rule. ' + `You should use either grid-area or ${d.prop}, not both`);\n    });\n  }\n\n  return undefined;\n} // Gap utils\n\n\nfunction getGridGap(decl) {\n  let gap = {}; // try to find gap\n\n  let testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, ({\n    prop,\n    value\n  }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row,, column] = parser(value).nodes;\n      gap.row = row && parser.stringify(row);\n      gap.column = column ? parser.stringify(column) : gap.row;\n    }\n\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\n\n\nfunction parseMediaParams(params) {\n  if (!params) {\n    return [];\n  }\n\n  let parsed = parser(params);\n  let prop;\n  let value;\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\n\n\nfunction shouldInheritGap(selA, selB) {\n  let result; // get arrays of selector split in 3-deep array\n\n  let splitSelectorArrA = splitSelector(selA);\n  let splitSelectorArrB = splitSelector(selB);\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0];\n\n      if (item === firstSelectorPart) {\n        return index;\n      }\n\n      return false;\n    }, false);\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every((part, innerIndex) => // because selectorA has more space elements, we need to slice\n        // selectorA array by 'idx' number to compare them\n        splitSelectorArrA[0].slice(idx)[index][innerIndex] === part);\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every((part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part);\n      });\n    });\n  }\n\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\n\n\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent;\n  let mediaRule = getParentMedia(rule);\n  let root = rule.root(); // get an array of selector split in 3-deep array\n\n  let splitSelectorArr = splitSelector(rule.selector); // abort if the rule already has gaps\n\n  if (Object.keys(gap).length > 0) {\n    return false;\n  } // e.g ['min-width']\n\n\n  let [prop] = parseMediaParams(mediaRule.params);\n  let lastBySpace = splitSelectorArr[0]; // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`); // find the closest rule with the same selector\n\n  let closestRuleGap;\n  root.walkRules(regexp, r => {\n    let gridGap; // abort if are checking the same rule\n\n    if (rule.toString() === r.toString()) {\n      return false;\n    } // find grid-gap values\n\n\n    r.walkDecls('grid-gap', d => gridGap = getGridGap(d)); // skip rule without gaps\n\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    } // skip rules that should not be inherited from\n\n\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n\n    let media = getParentMedia(r);\n\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0];\n\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n\n    return undefined;\n  }); // if we find the closest gap object\n\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n\n  return false;\n}\n\nfunction warnGridGap({\n  gap,\n  hasColumns,\n  decl,\n  result\n}) {\n  let hasBothGaps = gap.row && gap.column;\n\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not implement grid-gap without grid-template-columns');\n  }\n}\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\n\n\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count';\n      let [count, value] = node.nodes.reduce((acc, n) => {\n        if (n.type === 'word' && key === 'count') {\n          acc[0] = Math.abs(parseInt(n.value));\n          return acc;\n        }\n\n        if (n.type === 'div' && n.value === ',') {\n          key = 'value';\n          return acc;\n        }\n\n        if (key === 'value') {\n          acc[1] += parser.stringify(n);\n        }\n\n        return acc;\n      }, [0, '']);\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value);\n        }\n      }\n\n      return result;\n    }\n\n    if (node.type === 'space') {\n      return result;\n    }\n\n    return result.concat(parser.stringify(node));\n  }, []);\n  return normalized;\n}\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\n\n\nfunction autoplaceGridItems(decl, result, gap, autoflowValue = 'row') {\n  let {\n    parent\n  } = decl;\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n  let rows = normalizeRowColumn(rowDecl.value);\n  let columns = normalizeRowColumn(decl.value); // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from({\n      length: columns.length\n    }, (v, k) => k + rowIndex * columns.length + 1).join(' ');\n  });\n  let areas = parseGridAreas({\n    rows: filledRows,\n    gap\n  });\n  let keys = Object.keys(areas);\n  let items = keys.map(i => areas[i]); // Change the order of cells if grid-auto-flow value is 'column'\n\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start);\n  } // Insert new rules\n\n\n  items.reverse().forEach((item, index) => {\n    let {\n      column,\n      row\n    } = item;\n    let nodeSelector = parent.selectors.map(sel => sel + ` > *:nth-child(${keys.length - index})`).join(', '); // create new rule\n\n    let node = parent.clone().removeAll(); // change rule selector\n\n    node.selector = nodeSelector; // insert prefixed row/column values\n\n    node.append({\n      prop: '-ms-grid-row',\n      value: row.start\n    });\n    node.append({\n      prop: '-ms-grid-column',\n      value: column.start\n    }); // insert rule\n\n    parent.after(node);\n  });\n  return undefined;\n}\n\nmodule.exports = {\n  parse,\n  translate,\n  parseTemplate,\n  parseGridAreas,\n  warnMissedAreas,\n  insertAreas,\n  insertDecl,\n  prefixTrackProp,\n  prefixTrackValue,\n  getGridGap,\n  warnGridGap,\n  warnTemplateSelectorNotFound,\n  warnIfGridRowColumnExists,\n  inheritGridGap,\n  autoplaceGridItems\n};","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/grid-utils.js"],"names":["parser","require","list","uniq","escapeRegexp","splitSelector","convert","value","length","parseInt","translate","values","startIndex","endIndex","startValue","endValue","start","spanStart","end","spanEnd","parse","decl","node","current","i","nodes","type","push","insertDecl","prop","parent","some","cloneBefore","toString","prefixTrackProp","prefix","replace","transformRepeat","gap","count","size","reduce","result","key","stringify","filter","trim","val","forEach","item","index","join","prefixTrackValue","concat","DOTS","track","span","getColumns","line","split","parseGridAreas","rows","areas","rowIndex","row","area","columnIndex","test","column","Math","min","max","testTrack","verifyRowSize","parseTemplate","gridTemplate","columns","getMSDecls","addRowSpan","addColumnSpan","String","getParentMedia","name","changeDuplicateAreaSelectors","ruleSelectors","templateSelectors","map","selector","selectorBySpace","space","selectorByComma","comma","slice","ruleSelector","newSelector","tplSelector","selectorsEqual","ruleA","ruleB","selectors","sel","s","parseGridTemplatesData","css","parsed","walkDecls","d","rule","media","getGridGap","inheritedGap","inheritGridGap","areaNames","Object","keys","acc","allAreas","idx","hasAreas","includes","rules","hasNoDuplicates","r","hasDuplicates","duplicatesFound","duplicateAreaNames","params","updateSpan","areasCount","duplicateRules","undefined","insertAreas","isDisabled","gridTemplatesData","rulesToInsert","gridArea","gridAreaRule","hasPrefixedRow","first","gridAreaMedia","gridAreaRuleIndex","data","lastArea","selectorIsComplex","lastRuleIsSet","hasDuplicateName","lastRule","lastRuleIndex","reverse","prepend","assign","raws","between","cloned","clone","removeAll","after","remove","append","p","next","warnMissedAreas","missed","root","e","warn","warnTemplateSelectorNotFound","slicedSelectorArr","str","gridTemplateFound","foundAreaSelector","hasArea","tplSelectorArr","every","warnIfGridRowColumnExists","decls","endsWith","startsWith","testGap","parseMediaParams","walk","shouldInheritGap","selA","selB","splitSelectorArrA","splitSelectorArrB","res","firstSelectorPart","arr","part","innerIndex","byCommaArr","bySpaceArr","mediaRule","splitSelectorArr","lastBySpace","escaped","regexp","RegExp","closestRuleGap","walkRules","gridGap","propToCompare","warnGridGap","hasColumns","hasBothGaps","normalizeRowColumn","normalized","n","abs","autoplaceGridItems","autoflowValue","rowDecl","find","filledRows","_","Array","from","v","k","items","sort","a","b","nodeSelector","module","exports"],"mappings":"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","sourcesContent":["let parser = require('postcss-value-parser')\nlet list = require('postcss').list\n\nlet uniq = require('../utils').uniq\nlet escapeRegexp = require('../utils').escapeRegexp\nlet splitSelector = require('../utils').splitSelector\n\nfunction convert (value) {\n  if (\n    value &&\n    value.length === 2 &&\n    value[0] === 'span' &&\n    parseInt(value[1], 10) > 0\n  ) {\n    return [false, parseInt(value[1], 10)]\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false]\n  }\n\n  return [false, false]\n}\n\nfunction translate (values, startIndex, endIndex) {\n  let startValue = values[startIndex]\n  let endValue = values[endIndex]\n\n  if (!startValue) {\n    return [false, false]\n  }\n\n  let [start, spanStart] = convert(startValue)\n  let [end, spanEnd] = convert(endValue)\n\n  if (start && !endValue) {\n    return [start, false]\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart]\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd]\n  }\n\n  if (start && end) {\n    return [start, end - start]\n  }\n\n  return [false, false]\n}\n\nfunction parse (decl) {\n  let node = parser(decl.value)\n\n  let values = []\n  let current = 0\n  values[current] = []\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1\n      values[current] = []\n    } else if (i.type === 'word') {\n      values[current].push(i.value)\n    }\n  }\n\n  return values\n}\n\nfunction insertDecl (decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    })\n  }\n}\n\n// Track transforms\n\nfunction prefixTrackProp ({ prop, prefix }) {\n  return prefix + prop.replace('template-', '')\n}\n\nfunction transformRepeat ({ nodes }, { gap }) {\n  let { count, size } = nodes.reduce(\n    (result, node) => {\n      if (node.type === 'div' && node.value === ',') {\n        result.key = 'size'\n      } else {\n        result[result.key].push(parser.stringify(node))\n      }\n      return result\n    },\n    {\n      key: 'count',\n      size: [],\n      count: []\n    }\n  )\n\n  // insert gap values\n  if (gap) {\n    size = size.filter(i => i.trim())\n    let val = []\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap)\n        }\n        val.push(item)\n      })\n    }\n\n    return val.join(' ')\n  }\n\n  return `(${size.join('')})[${count.join('')}]`\n}\n\nfunction prefixTrackValue ({ value, gap }) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, { gap })\n      })\n    }\n    if (gap && node.type === 'space') {\n      return nodes.concat(\n        {\n          type: 'space',\n          value: ' '\n        },\n        {\n          type: 'word',\n          value: gap\n        },\n        node\n      )\n    }\n    return nodes.concat(node)\n  }, [])\n\n  return parser.stringify(result)\n}\n\n// Parse grid-template-areas\n\nlet DOTS = /^\\.+$/\n\nfunction track (start, end) {\n  return { start, end, span: end - start }\n}\n\nfunction getColumns (line) {\n  return line.trim().split(/\\s+/g)\n}\n\nfunction parseGridAreas ({ rows, gap }) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2\n\n    if (line.trim() === '') return areas\n\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return\n\n      if (gap.column) columnIndex *= 2\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        }\n      } else {\n        let { column, row } = areas[area]\n\n        column.start = Math.min(column.start, columnIndex + 1)\n        column.end = Math.max(column.end, columnIndex + 2)\n        column.span = column.end - column.start\n\n        row.start = Math.min(row.start, rowIndex + 1)\n        row.end = Math.max(row.end, rowIndex + 2)\n        row.span = row.end - row.start\n      }\n    })\n\n    return areas\n  }, {})\n}\n\n// Parse grid-template\n\nfunction testTrack (node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value)\n}\n\nfunction verifyRowSize (result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto')\n  }\n  return result\n}\n\nfunction parseTemplate ({ decl, gap }) {\n  let gridTemplate = parser(decl.value).nodes.reduce(\n    (result, node) => {\n      let { type, value } = node\n\n      if (testTrack(node) || type === 'space') return result\n\n      // area\n      if (type === 'string') {\n        result = verifyRowSize(result)\n        result.areas.push(value)\n      }\n\n      // values and function\n      if (type === 'word' || type === 'function') {\n        result[result.key].push(parser.stringify(node))\n      }\n\n      // divider(/)\n      if (type === 'div' && value === '/') {\n        result.key = 'columns'\n        result = verifyRowSize(result)\n      }\n\n      return result\n    },\n    {\n      key: 'rows',\n      columns: [],\n      rows: [],\n      areas: []\n    }\n  )\n\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  }\n}\n\n// Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\nfunction getMSDecls (area, addRowSpan = false, addColumnSpan = false) {\n  let result = [\n    {\n      prop: '-ms-grid-row',\n      value: String(area.row.start)\n    }\n  ]\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    })\n  }\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  })\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    })\n  }\n  return result\n}\n\nfunction getParentMedia (parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent\n  }\n  if (!parent.parent) {\n    return false\n  }\n  return getParentMedia(parent.parent)\n}\n\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\nfunction changeDuplicateAreaSelectors (ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector)\n    let selectorByComma = list.comma(selector)\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('')\n    }\n    return selector\n  })\n\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' '\n      return `${space}${tplSelector} > ${ruleSelector}`\n    })\n\n    return newSelector\n  })\n}\n\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\nfunction selectorsEqual (ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.some(s => s === sel)\n  })\n}\n\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\nfunction parseGridTemplatesData (css) {\n  let parsed = []\n\n  // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent\n    let media = getParentMedia(rule)\n    let gap = getGridGap(d)\n    let inheritedGap = inheritGridGap(d, gap)\n    let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap })\n    let areaNames = Object.keys(areas)\n\n    // skip node if it doesn't have areas\n    if (areaNames.length === 0) {\n      return true\n    }\n\n    // check parsed array for item that include the same area names\n    // return index of that item\n    let index = parsed.reduce((acc, { allAreas }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area))\n      return hasAreas ? idx : acc\n    }, null)\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let { allAreas, rules } = parsed[index]\n\n      // check if rule has no duplicate area names\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule)\n      })\n\n      let duplicatesFound = false\n\n      // check need to gather all duplicate area names\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true\n          return r.duplicateAreaNames\n        }\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name)\n            }\n          })\n        }\n        return uniq(acc)\n      }, [])\n\n      // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name]\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true\n          }\n        })\n      })\n\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames])\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames,\n        areas\n      })\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [\n          {\n            hasDuplicates: false,\n            duplicateRules: [],\n            params: media.params,\n            selectors: rule.selectors,\n            node: rule,\n            duplicateAreaNames: [],\n            areas\n          }\n        ]\n      })\n    }\n\n    return undefined\n  })\n\n  return parsed\n}\n\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\nfunction insertAreas (css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css)\n\n  // return undefined if no declarations found\n  if (gridTemplatesData.length === 0) {\n    return undefined\n  }\n\n  // we need to store the rules that we will insert later\n  let rulesToInsert = {}\n\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row'\n    let gridAreaMedia = getParentMedia(gridAreaRule)\n\n    if (isDisabled(gridArea)) {\n      return undefined\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule)\n\n    let value = gridArea.value\n    // found the data that matches grid-area identifier\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0]\n\n    if (!data) {\n      return true\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1]\n    let selectorBySpace = list.space(gridAreaRule.selector)\n    let selectorByComma = list.comma(gridAreaRule.selector)\n    let selectorIsComplex =\n      selectorBySpace.length > 1 &&\n      selectorBySpace.length > selectorByComma.length\n\n    // prevent doubling of prefixes\n    if (hasPrefixedRow) {\n      return false\n    }\n\n    // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {}\n    }\n\n    let lastRuleIsSet = false\n\n    // walk through every grid-template rule data\n    for (let rule of data.rules) {\n      let area = rule.areas[value]\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value)\n\n      // if we can't find the area name, update lastRule and continue\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule\n        let lastRuleIndex\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule)\n        } else {\n          /* istanbul ignore next */\n          lastRuleIndex = -1\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n        continue\n      }\n\n      // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = []\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n\n        getMSDecls(area, false, false)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        rulesToInsert[lastArea].lastRule = gridAreaRule\n        lastRuleIsSet = true\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        cloned.selectors = changeDuplicateAreaSelectors(\n          cloned.selectors,\n          rule.selectors\n        )\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned)\n        }\n        rulesToInsert[lastArea].lastRule = cloned\n        lastRuleIsSet = true\n      } else if (\n        rule.hasDuplicates &&\n        !rule.params &&\n        selectorIsComplex &&\n        gridAreaRule.selector.includes(rule.selectors[0])\n      ) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove())\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(\n            cloned.selectors,\n            rule.selectors\n          )\n        }\n\n        cloned.raws = rule.node.raws\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned)\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned)\n        }\n\n        // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n      }\n    }\n\n    return undefined\n  })\n\n  // append stored rules inside the media rules\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area]\n    let lastRule = data.lastRule\n    Object.keys(data)\n      .reverse()\n      .filter(p => p !== 'lastRule')\n      .forEach(params => {\n        if (data[params].length > 0 && lastRule) {\n          lastRule.after({ name: 'media', params })\n          lastRule.next().append(data[params])\n        }\n      })\n  })\n\n  return undefined\n}\n\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nfunction warnMissedAreas (areas, decl, result) {\n  let missed = Object.keys(areas)\n\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value)\n  })\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '))\n  }\n\n  return undefined\n}\n\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nfunction warnTemplateSelectorNotFound (decl, result) {\n  let rule = decl.parent\n  let root = decl.root()\n  let duplicatesFound = false\n\n  // slice selector array. Remove the last part (for comparison)\n  let slicedSelectorArr = list\n    .space(rule.selector)\n    .filter(str => str !== '>')\n    .slice(0, -1)\n\n  // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false\n    let foundAreaSelector = null\n\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent\n      let templateSelectors = parent.selectors\n\n      let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) })\n      let hasArea = areas[decl.value]\n\n      // find the the matching selectors\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break\n        }\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>')\n\n        gridTemplateFound = tplSelectorArr.every(\n          (item, idx) => item === slicedSelectorArr[idx]\n        )\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector\n      }\n\n      // if we found the duplicate area with different selector\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true\n      }\n\n      return undefined\n    })\n\n    // warn user if we didn't find template\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(\n        result,\n        'Autoprefixer cannot find a grid-template ' +\n          `containing the duplicate grid-area \"${decl.value}\" ` +\n          `with full selector matching: ${slicedSelectorArr.join(' ')}`\n      )\n    }\n  }\n}\n\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nfunction warnIfGridRowColumnExists (decl, result) {\n  let rule = decl.parent\n  let decls = []\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (\n      !d.prop.endsWith('-end') &&\n      !d.value.startsWith('span') &&\n      !d.prop.endsWith('-gap')\n    ) {\n      decls.push(d)\n    }\n  })\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(\n        result,\n        'You already have a grid-area declaration present in the rule. ' +\n          `You should use either grid-area or ${d.prop}, not both`\n      )\n    })\n  }\n\n  return undefined\n}\n\n// Gap utils\n\nfunction getGridGap (decl) {\n  let gap = {}\n\n  // try to find gap\n  let testGap = /^(grid-)?((row|column)-)?gap$/\n  decl.parent.walkDecls(testGap, ({ prop, value }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row, , column] = parser(value).nodes\n\n      gap.row = row && parser.stringify(row)\n      gap.column = column ? parser.stringify(column) : gap.row\n    }\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value\n  })\n\n  return gap\n}\n\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\nfunction parseMediaParams (params) {\n  if (!params) {\n    return []\n  }\n  let parsed = parser(params)\n  let prop\n  let value\n\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''))\n    }\n  })\n\n  return [prop, value]\n}\n\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\nfunction shouldInheritGap (selA, selB) {\n  let result\n\n  // get arrays of selector split in 3-deep array\n  let splitSelectorArrA = splitSelector(selA)\n  let splitSelectorArrB = splitSelector(selB)\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0]\n      if (item === firstSelectorPart) {\n        return index\n      }\n      return false\n    }, false)\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every(\n          (part, innerIndex) =>\n            // because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n        )\n      })\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every(\n          (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part\n        )\n      })\n    })\n  }\n\n  return result\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\nfunction inheritGridGap (decl, gap) {\n  let rule = decl.parent\n  let mediaRule = getParentMedia(rule)\n  let root = rule.root()\n\n  // get an array of selector split in 3-deep array\n  let splitSelectorArr = splitSelector(rule.selector)\n\n  // abort if the rule already has gaps\n  if (Object.keys(gap).length > 0) {\n    return false\n  }\n\n  // e.g ['min-width']\n  let [prop] = parseMediaParams(mediaRule.params)\n\n  let lastBySpace = splitSelectorArr[0]\n\n  // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0])\n\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`)\n\n  // find the closest rule with the same selector\n  let closestRuleGap\n  root.walkRules(regexp, r => {\n    let gridGap\n\n    // abort if are checking the same rule\n    if (rule.toString() === r.toString()) {\n      return false\n    }\n\n    // find grid-gap values\n    r.walkDecls('grid-gap', d => (gridGap = getGridGap(d)))\n\n    // skip rule without gaps\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true\n    }\n\n    // skip rules that should not be inherited from\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true\n    }\n\n    let media = getParentMedia(r)\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0]\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap\n        return true\n      }\n    } else {\n      closestRuleGap = gridGap\n      return true\n    }\n\n    return undefined\n  })\n\n  // if we find the closest gap object\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap\n  }\n  return false\n}\n\nfunction warnGridGap ({ gap, hasColumns, decl, result }) {\n  let hasBothGaps = gap.row && gap.column\n  if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {\n    delete gap.column\n    decl.warn(\n      result,\n      'Can not implement grid-gap without grid-template-columns'\n    )\n  }\n}\n\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\nfunction normalizeRowColumn (str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count'\n\n      let [count, value] = node.nodes.reduce(\n        (acc, n) => {\n          if (n.type === 'word' && key === 'count') {\n            acc[0] = Math.abs(parseInt(n.value))\n            return acc\n          }\n          if (n.type === 'div' && n.value === ',') {\n            key = 'value'\n            return acc\n          }\n          if (key === 'value') {\n            acc[1] += parser.stringify(n)\n          }\n          return acc\n        },\n        [0, '']\n      )\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value)\n        }\n      }\n\n      return result\n    }\n    if (node.type === 'space') {\n      return result\n    }\n    return result.concat(parser.stringify(node))\n  }, [])\n\n  return normalized\n}\n\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\nfunction autoplaceGridItems (decl, result, gap, autoflowValue = 'row') {\n  let { parent } = decl\n\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n  let rows = normalizeRowColumn(rowDecl.value)\n  let columns = normalizeRowColumn(decl.value)\n\n  // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from(\n      { length: columns.length },\n      (v, k) => k + rowIndex * columns.length + 1\n    ).join(' ')\n  })\n\n  let areas = parseGridAreas({ rows: filledRows, gap })\n  let keys = Object.keys(areas)\n  let items = keys.map(i => areas[i])\n\n  // Change the order of cells if grid-auto-flow value is 'column'\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start)\n  }\n\n  // Insert new rules\n  items.reverse().forEach((item, index) => {\n    let { column, row } = item\n    let nodeSelector = parent.selectors\n      .map(sel => sel + ` > *:nth-child(${keys.length - index})`)\n      .join(', ')\n\n    // create new rule\n    let node = parent.clone().removeAll()\n\n    // change rule selector\n    node.selector = nodeSelector\n\n    // insert prefixed row/column values\n    node.append({ prop: '-ms-grid-row', value: row.start })\n    node.append({ prop: '-ms-grid-column', value: column.start })\n\n    // insert rule\n    parent.after(node)\n  })\n\n  return undefined\n}\n\nmodule.exports = {\n  parse,\n  translate,\n  parseTemplate,\n  parseGridAreas,\n  warnMissedAreas,\n  insertAreas,\n  insertDecl,\n  prefixTrackProp,\n  prefixTrackValue,\n  getGridGap,\n  warnGridGap,\n  warnTemplateSelectorNotFound,\n  warnIfGridRowColumnExists,\n  inheritGridGap,\n  autoplaceGridItems\n}\n"]},"metadata":{},"sourceType":"script"}