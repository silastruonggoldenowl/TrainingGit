{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\nconst routesConfig = {\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true,\n    routes: {\n      login: {\n        path: \"/login\",\n        component: Login,\n        privateRoute: false\n      }\n    },\n    noMatch: {\n      path: \"*\",\n      component: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"No Match\"\n      }, void 0, false),\n      privateRoute: false\n    }\n  }\n};\n\nfunction RouteWrap(route) {\n  return !route.privateRoute ? /*#__PURE__*/_jsxDEV(Route, {\n    path: route.path,\n    render: () => /*#__PURE__*/_jsxDEV(route.component, {\n      component: route.component\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: routesConfig.home.routes.login.path,\n      state: {\n        from: route.path\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RouteWrap;\n\nfunction RouteWithSubRoutes(props) {\n  const {\n    routes,\n    path,\n    component,\n    privateRoute\n  } = props;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [routes && Object.values(routes).map(route => /*#__PURE__*/_jsxDEV(RouteWithSubRoutes, {\n      path: route.path,\n      component: route.component,\n      privateRoute: route.privateRoute,\n      routes: route.routes\n    }, route.path, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(RouteWrap, {\n      path: path,\n      component: component,\n      privateRoute: privateRoute,\n      routes: routes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c2 = RouteWithSubRoutes;\n\nfunction RouteConfig(props) {\n  const {\n    authState\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: Object.values(routesConfig).map(route => /*#__PURE__*/_jsxDEV(RouteWithSubRoutes, {\n        path: route.path,\n        component: route.component,\n        privateRoute: route.privateRoute && !authState.signIn,\n        routes: route.routes\n      }, route.path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = RouteConfig;\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false\n  }\n};\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool\n  })\n};\nRouteWithSubRoutes.defaultProps = {\n  routes: {},\n  path: \"\",\n  component: {},\n  privateRoute: false\n};\nRouteWithSubRoutes.propTypes = {\n  routes: PropTypes.objectOf(PropTypes.object),\n  path: PropTypes.string,\n  component: PropTypes.symbol,\n  privateRoute: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  authState: state.authState\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RouteWrap\");\n$RefreshReg$(_c2, \"RouteWithSubRoutes\");\n$RefreshReg$(_c3, \"RouteConfig\");","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js"],"names":["React","connect","BrowserRouter","Router","Switch","Route","Redirect","PropTypes","Login","Todos","routesConfig","home","path","component","privateRoute","routes","login","noMatch","RouteWrap","route","pathname","state","from","RouteWithSubRoutes","props","Object","values","map","RouteConfig","authState","signIn","defaultProps","propTypes","exact","bool","objectOf","object","string","symbol","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos } from \"./pages\";\n\nconst routesConfig = {\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true,\n    routes: {\n      login: {\n        path: \"/login\",\n        component: Login,\n        privateRoute: false,\n      },\n    },\n    noMatch: {\n      path: \"*\",\n      component: <>No Match</>,\n      privateRoute: false,\n    },\n  },\n};\n\nfunction RouteWrap(route) {\n  return !route.privateRoute ? (\n    <Route\n      path={route.path}\n      render={() => <route.component component={route.component} />}\n    />\n  ) : (\n    <Redirect\n      to={{\n        pathname: routesConfig.home.routes.login.path,\n        state: { from: route.path },\n      }}\n    />\n  );\n}\n\nfunction RouteWithSubRoutes(props) {\n  const { routes, path, component, privateRoute } = props;\n  return (\n    <>\n      {routes &&\n        Object.values(routes).map((route) => (\n          <RouteWithSubRoutes\n            key={route.path}\n            path={route.path}\n            component={route.component}\n            privateRoute={route.privateRoute}\n            routes={route.routes}\n          />\n        ))}\n      <RouteWrap\n        path={path}\n        component={component}\n        privateRoute={privateRoute}\n        routes={routes}\n      />\n    </>\n  );\n}\n\nfunction RouteConfig(props) {\n  const { authState } = props;\n  return (\n    <Router>\n      <Switch>\n        {Object.values(routesConfig).map((route) => (\n          <RouteWithSubRoutes\n            key={route.path}\n            path={route.path}\n            component={route.component}\n            privateRoute={route.privateRoute && !authState.signIn}\n            routes={route.routes}\n          />\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false,\n  },\n};\n\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool,\n  }),\n};\n\nRouteWithSubRoutes.defaultProps = {\n  routes: {},\n  path: \"\",\n  component: {},\n  privateRoute: false,\n};\n\nRouteWithSubRoutes.propTypes = {\n  routes: PropTypes.objectOf(PropTypes.object),\n  path: PropTypes.string,\n  component: PropTypes.symbol,\n  privateRoute: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.authState,\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n"]},"metadata":{},"sourceType":"module"}