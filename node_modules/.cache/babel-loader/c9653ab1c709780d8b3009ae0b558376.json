{"ast":null,"code":"let Declaration = require('../declaration');\n\nclass WritingMode extends Declaration {\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      let cloned = this.set(this.clone(decl), prefix);\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      let direction = 'ltr';\n      decl.parent.nodes.forEach(i => {\n        if (i.prop === 'direction') {\n          if (i.value === 'rtl' || i.value === 'ltr') direction = i.value;\n        }\n      });\n      cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;\n      return decl.parent.insertBefore(decl, cloned);\n    }\n\n    return super.insert(decl, prefix, prefixes);\n  }\n\n}\n\nWritingMode.names = ['writing-mode'];\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n};\nmodule.exports = WritingMode;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/writing-mode.js"],"names":["Declaration","require","WritingMode","insert","decl","prefix","prefixes","cloned","set","clone","needCascade","raws","before","calcBefore","direction","parent","nodes","forEach","i","prop","value","msValues","insertBefore","names","ltr","rtl","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,MAAMC,WAAN,SAA0BF,WAA1B,CAAsC;AACpCG,EAAAA,MAAM,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,QAAhB,EAA0B;AAC9B,QAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,UAAIE,MAAM,GAAG,KAAKC,GAAL,CAAS,KAAKC,KAAL,CAAWL,IAAX,CAAT,EAA2BC,MAA3B,CAAb;;AAEA,UAAI,KAAKK,WAAL,CAAiBN,IAAjB,CAAJ,EAA4B;AAC1BG,QAAAA,MAAM,CAACI,IAAP,CAAYC,MAAZ,GAAqB,KAAKC,UAAL,CAAgBP,QAAhB,EAA0BF,IAA1B,EAAgCC,MAAhC,CAArB;AACD;;AACD,UAAIS,SAAS,GAAG,KAAhB;AAEAV,MAAAA,IAAI,CAACW,MAAL,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0BC,CAAC,IAAI;AAC7B,YAAIA,CAAC,CAACC,IAAF,KAAW,WAAf,EAA4B;AAC1B,cAAID,CAAC,CAACE,KAAF,KAAY,KAAZ,IAAqBF,CAAC,CAACE,KAAF,KAAY,KAArC,EAA4CN,SAAS,GAAGI,CAAC,CAACE,KAAd;AAC7C;AACF,OAJD;AAMAb,MAAAA,MAAM,CAACa,KAAP,GAAelB,WAAW,CAACmB,QAAZ,CAAqBP,SAArB,EAAgCV,IAAI,CAACgB,KAArC,KAA+ChB,IAAI,CAACgB,KAAnE;AACA,aAAOhB,IAAI,CAACW,MAAL,CAAYO,YAAZ,CAAyBlB,IAAzB,EAA+BG,MAA/B,CAAP;AACD;;AAED,WAAO,MAAMJ,MAAN,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAP;AACD;;AArBmC;;AAwBtCJ,WAAW,CAACqB,KAAZ,GAAoB,CAAC,cAAD,CAApB;AAEArB,WAAW,CAACmB,QAAZ,GAAuB;AACrBG,EAAAA,GAAG,EAAE;AACH,qBAAiB,OADd;AAEH,mBAAe,OAFZ;AAGH,mBAAe;AAHZ,GADgB;AAMrBC,EAAAA,GAAG,EAAE;AACH,qBAAiB,OADd;AAEH,mBAAe,OAFZ;AAGH,mBAAe;AAHZ;AANgB,CAAvB;AAaAC,MAAM,CAACC,OAAP,GAAiBzB,WAAjB","sourcesContent":["let Declaration = require('../declaration')\n\nclass WritingMode extends Declaration {\n  insert (decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      let cloned = this.set(this.clone(decl), prefix)\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n      let direction = 'ltr'\n\n      decl.parent.nodes.forEach(i => {\n        if (i.prop === 'direction') {\n          if (i.value === 'rtl' || i.value === 'ltr') direction = i.value\n        }\n      })\n\n      cloned.value = WritingMode.msValues[direction][decl.value] || decl.value\n      return decl.parent.insertBefore(decl, cloned)\n    }\n\n    return super.insert(decl, prefix, prefixes)\n  }\n}\n\nWritingMode.names = ['writing-mode']\n\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n}\n\nmodule.exports = WritingMode\n"]},"metadata":{},"sourceType":"script"}