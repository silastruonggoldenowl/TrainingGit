{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar helper = require('../helper');\n/**\n * Default arguments for the `--ignore` option.\n * @type {string[]}\n */\n\n\nvar DEFAULT_IGNORE = ['node_modules'];\n/**\n * Schema for the `upload-sourcemaps` command.\n * @type {OptionsSchema}\n */\n\nvar SOURCEMAPS_SCHEMA = require('./options/uploadSourcemaps');\n/**\n * Schema for the `deploys new` command.\n * @type {OptionsSchema}\n */\n\n\nvar DEPLOYS_SCHEMA = require('./options/deploys');\n/**\n * Manages releases and release artifacts on Sentry.\n * @namespace SentryReleases\n */\n\n\nvar Releases = /*#__PURE__*/function () {\n  /**\n   * Creates a new `Releases` instance.\n   *\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  function Releases(options) {\n    _classCallCheck(this, Releases);\n\n    this.options = options || {};\n\n    if (typeof this.options.configFile === 'string') {\n      this.configFile = this.options.configFile;\n    }\n\n    delete this.options.configFile;\n  }\n  /**\n   * Registers a new release with sentry.\n   *\n   * The given release name should be unique and deterministic. It can later be used to\n   * upload artifacts, such as source maps.\n   *\n   * @param {string} release Unique name of the new release.\n   * @param {object} options A set of options when creating a release.\n   * @param {array} options.projects The list of project slugs for a release.\n   * @returns {Promise} A promise that resolves when the release has been created.\n   * @memberof SentryReleases\n   */\n\n\n  _createClass(Releases, [{\n    key: \"new\",\n    value: function _new(release, options) {\n      var args = ['releases', 'new', release].concat(helper.getProjectFlagsFromOptions(options));\n      return this.execute(args, null);\n    }\n    /**\n     * Specifies the set of commits covered in this release.\n     *\n     * @param {string} release Unique name of the release\n     * @param {object} options A set of options to configure the commits to include\n     * @param {string} options.repo The full repo name as defined in Sentry\n     * @param {boolean} options.auto Automatically choose the associated commit (uses\n     * the current commit). Overrides other options.\n     * @param {string} options.commit The current (last) commit in the release.\n     * @param {string} options.previousCommit The commit before the beginning of this\n     * release (in other words, the last commit of the previous release). If omitted,\n     * this will default to the last commit of the previous release in Sentry. If there\n     * was no previous release, the last 10 commits will be used.\n     * @returns {Promise} A promise that resolves when the commits have been associated\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"setCommits\",\n    value: function setCommits(release, options) {\n      if (!options || !options.auto && (!options.repo || !options.commit)) {\n        throw new Error('options.auto, or options.repo and options.commit must be specified');\n      }\n\n      var commitFlags = [];\n\n      if (options.auto) {\n        commitFlags = ['--auto'];\n      } else if (options.previousCommit) {\n        commitFlags = ['--commit', \"\".concat(options.repo, \"@\").concat(options.previousCommit, \"..\").concat(options.commit)];\n      } else {\n        commitFlags = ['--commit', \"\".concat(options.repo, \"@\").concat(options.commit)];\n      }\n\n      return this.execute(['releases', 'set-commits', release].concat(commitFlags));\n    }\n    /**\n     * Marks this release as complete. This should be called once all artifacts has been\n     * uploaded.\n     *\n     * @param {string} release Unique name of the release.\n     * @returns {Promise} A promise that resolves when the release has been finalized.\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(release) {\n      return this.execute(['releases', 'finalize', release], null);\n    }\n    /**\n     * Creates a unique, deterministic version identifier based on the project type and\n     * source files. This identifier can be used as release name.\n     *\n     * @returns {Promise.<string>} A promise that resolves to the version string.\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"proposeVersion\",\n    value: function proposeVersion() {\n      return this.execute(['releases', 'propose-version'], null).then(function (version) {\n        return version && version.trim();\n      });\n    }\n    /**\n     * Scans the given include folders for JavaScript source maps and uploads them to the\n     * specified release for processing.\n     *\n     * The options require an `include` array, which is a list of directories to scan.\n     * Additionally, it supports to ignore certain files, validate and preprocess source\n     * maps and define a URL prefix.\n     *\n     * @example\n     * await cli.releases.uploadSourceMaps(cli.releases.proposeVersion(), {\n     *   // required options:\n     *   include: ['build'],\n     *\n     *   // default options:\n     *   ignore: ['node_modules'],  // globs for files to ignore\n     *   ignoreFile: null,          // path to a file with ignore rules\n     *   rewrite: false,            // preprocess sourcemaps before uploading\n     *   sourceMapReference: true,  // add a source map reference to source files\n     *   stripPrefix: [],           // remove certain prefices from filenames\n     *   stripCommonPrefix: false,  // guess common prefices to remove from filenames\n     *   validate: false,           // validate source maps and cancel the upload on error\n     *   urlPrefix: '',             // add a prefix source map urls after stripping them\n     *   urlSuffix: '',             // add a suffix source map urls after stripping them\n     *   ext: ['js', 'map', 'jsbundle', 'bundle'],  // override file extensions to scan for\n     *   projects: ['node']        // provide a list of projects\n     * });\n     *\n     * @param {string} release Unique name of the release.\n     * @param {object} options Options to configure the source map upload.\n     * @returns {Promise} A promise that resolves when the upload has completed successfully.\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"uploadSourceMaps\",\n    value: function uploadSourceMaps(release, options) {\n      var _this = this;\n\n      if (!options || !options.include) {\n        throw new Error('options.include must be a vaild path(s)');\n      }\n\n      var uploads = options.include.map(function (sourcemapPath) {\n        var newOptions = _objectSpread({}, options);\n\n        if (!newOptions.ignoreFile && !newOptions.ignore) {\n          newOptions.ignore = DEFAULT_IGNORE;\n        }\n\n        var args = ['releases'].concat(helper.getProjectFlagsFromOptions(options)).concat(['files', release, 'upload-sourcemaps', sourcemapPath]);\n        return _this.execute(helper.prepareCommand(args, SOURCEMAPS_SCHEMA, newOptions), true);\n      });\n      return Promise.all(uploads);\n    }\n    /**\n     * List all deploys for a given release.\n     *\n     * @param {string} release Unique name of the release.\n     * @returns {Promise} A promise that resolves when the list comes back from the server.\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"listDeploys\",\n    value: function listDeploys(release) {\n      return this.execute(['releases', 'deploys', release, 'list'], null);\n    }\n    /**\n     * Creates a new release deployment. This should be called after the release has been\n     * finalized, while deploying on a given environment.\n     *\n     * @example\n     * await cli.releases.newDeploy(cli.releases.proposeVersion(), {\n     *   // required options:\n     *   env: 'production',          // environment for this release. Values that make sense here would be 'production' or 'staging'\n     *\n     *   // optional options:\n     *   started: 42,                // unix timestamp when the deployment started\n     *   finished: 1337,             // unix timestamp when the deployment finished\n     *   time: 1295,                 // deployment duration in seconds. This can be specified alternatively to `started` and `finished`\n     *   name: 'PickleRick',         // human readable name for this deployment\n     *   url: 'https://example.com', // URL that points to the deployment\n     * });\n     *\n     * @param {string} release Unique name of the release.\n     * @param {object} options Options to configure the new release deploy.\n     * @returns {Promise} A promise that resolves when the deploy has been created.\n     * @memberof SentryReleases\n     */\n\n  }, {\n    key: \"newDeploy\",\n    value: function newDeploy(release, options) {\n      if (!options || !options.env) {\n        throw new Error('options.env must be a vaild name');\n      }\n\n      var args = ['releases', 'deploys', release, 'new'];\n      return this.execute(helper.prepareCommand(args, DEPLOYS_SCHEMA, options), null);\n    }\n    /**\n     * See {helper.execute} docs.\n     * @param {string[]} args Command line arguments passed to `sentry-cli`.\n     * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n     * @returns {Promise.<string>} A promise that resolves to the standard output.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(args, live) {\n      return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n    }\n  }]);\n\n  return Releases;\n}();\n\nmodule.exports = Releases;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/@sentry/cli/js/releases/index.js"],"names":["helper","require","DEFAULT_IGNORE","SOURCEMAPS_SCHEMA","DEPLOYS_SCHEMA","Releases","options","configFile","release","args","concat","getProjectFlagsFromOptions","execute","auto","repo","commit","Error","commitFlags","previousCommit","then","version","trim","include","uploads","map","sourcemapPath","newOptions","ignoreFile","ignore","prepareCommand","Promise","all","env","live","silent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst helper = require('../helper');\n\n/**\n * Default arguments for the `--ignore` option.\n * @type {string[]}\n */\nconst DEFAULT_IGNORE = ['node_modules'];\n\n/**\n * Schema for the `upload-sourcemaps` command.\n * @type {OptionsSchema}\n */\nconst SOURCEMAPS_SCHEMA = require('./options/uploadSourcemaps');\n\n/**\n * Schema for the `deploys new` command.\n * @type {OptionsSchema}\n */\nconst DEPLOYS_SCHEMA = require('./options/deploys');\n\n/**\n * Manages releases and release artifacts on Sentry.\n * @namespace SentryReleases\n */\nclass Releases {\n  /**\n   * Creates a new `Releases` instance.\n   *\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  constructor(options) {\n    this.options = options || {};\n    if (typeof this.options.configFile === 'string') {\n      this.configFile = this.options.configFile;\n    }\n    delete this.options.configFile;\n  }\n\n  /**\n   * Registers a new release with sentry.\n   *\n   * The given release name should be unique and deterministic. It can later be used to\n   * upload artifacts, such as source maps.\n   *\n   * @param {string} release Unique name of the new release.\n   * @param {object} options A set of options when creating a release.\n   * @param {array} options.projects The list of project slugs for a release.\n   * @returns {Promise} A promise that resolves when the release has been created.\n   * @memberof SentryReleases\n   */\n  new(release, options) {\n    const args = ['releases', 'new', release].concat(helper.getProjectFlagsFromOptions(options));\n    return this.execute(args, null);\n  }\n\n  /**\n   * Specifies the set of commits covered in this release.\n   *\n   * @param {string} release Unique name of the release\n   * @param {object} options A set of options to configure the commits to include\n   * @param {string} options.repo The full repo name as defined in Sentry\n   * @param {boolean} options.auto Automatically choose the associated commit (uses\n   * the current commit). Overrides other options.\n   * @param {string} options.commit The current (last) commit in the release.\n   * @param {string} options.previousCommit The commit before the beginning of this\n   * release (in other words, the last commit of the previous release). If omitted,\n   * this will default to the last commit of the previous release in Sentry. If there\n   * was no previous release, the last 10 commits will be used.\n   * @returns {Promise} A promise that resolves when the commits have been associated\n   * @memberof SentryReleases\n   */\n  setCommits(release, options) {\n    if (!options || (!options.auto && (!options.repo || !options.commit))) {\n      throw new Error('options.auto, or options.repo and options.commit must be specified');\n    }\n\n    let commitFlags = [];\n\n    if (options.auto) {\n      commitFlags = ['--auto'];\n    } else if (options.previousCommit) {\n      commitFlags = ['--commit', `${options.repo}@${options.previousCommit}..${options.commit}`];\n    } else {\n      commitFlags = ['--commit', `${options.repo}@${options.commit}`];\n    }\n\n    return this.execute(['releases', 'set-commits', release].concat(commitFlags));\n  }\n\n  /**\n   * Marks this release as complete. This should be called once all artifacts has been\n   * uploaded.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the release has been finalized.\n   * @memberof SentryReleases\n   */\n  finalize(release) {\n    return this.execute(['releases', 'finalize', release], null);\n  }\n\n  /**\n   * Creates a unique, deterministic version identifier based on the project type and\n   * source files. This identifier can be used as release name.\n   *\n   * @returns {Promise.<string>} A promise that resolves to the version string.\n   * @memberof SentryReleases\n   */\n  proposeVersion() {\n    return this.execute(['releases', 'propose-version'], null).then(\n      version => version && version.trim()\n    );\n  }\n\n  /**\n   * Scans the given include folders for JavaScript source maps and uploads them to the\n   * specified release for processing.\n   *\n   * The options require an `include` array, which is a list of directories to scan.\n   * Additionally, it supports to ignore certain files, validate and preprocess source\n   * maps and define a URL prefix.\n   *\n   * @example\n   * await cli.releases.uploadSourceMaps(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   include: ['build'],\n   *\n   *   // default options:\n   *   ignore: ['node_modules'],  // globs for files to ignore\n   *   ignoreFile: null,          // path to a file with ignore rules\n   *   rewrite: false,            // preprocess sourcemaps before uploading\n   *   sourceMapReference: true,  // add a source map reference to source files\n   *   stripPrefix: [],           // remove certain prefices from filenames\n   *   stripCommonPrefix: false,  // guess common prefices to remove from filenames\n   *   validate: false,           // validate source maps and cancel the upload on error\n   *   urlPrefix: '',             // add a prefix source map urls after stripping them\n   *   urlSuffix: '',             // add a suffix source map urls after stripping them\n   *   ext: ['js', 'map', 'jsbundle', 'bundle'],  // override file extensions to scan for\n   *   projects: ['node']        // provide a list of projects\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the source map upload.\n   * @returns {Promise} A promise that resolves when the upload has completed successfully.\n   * @memberof SentryReleases\n   */\n  uploadSourceMaps(release, options) {\n    if (!options || !options.include) {\n      throw new Error('options.include must be a vaild path(s)');\n    }\n\n    const uploads = options.include.map(sourcemapPath => {\n      const newOptions = { ...options };\n      if (!newOptions.ignoreFile && !newOptions.ignore) {\n        newOptions.ignore = DEFAULT_IGNORE;\n      }\n\n      const args = ['releases']\n        .concat(helper.getProjectFlagsFromOptions(options))\n        .concat(['files', release, 'upload-sourcemaps', sourcemapPath]);\n      return this.execute(helper.prepareCommand(args, SOURCEMAPS_SCHEMA, newOptions), true);\n    });\n\n    return Promise.all(uploads);\n  }\n\n  /**\n   * List all deploys for a given release.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the list comes back from the server.\n   * @memberof SentryReleases\n   */\n  listDeploys(release) {\n    return this.execute(['releases', 'deploys', release, 'list'], null);\n  }\n\n  /**\n   * Creates a new release deployment. This should be called after the release has been\n   * finalized, while deploying on a given environment.\n   *\n   * @example\n   * await cli.releases.newDeploy(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   env: 'production',          // environment for this release. Values that make sense here would be 'production' or 'staging'\n   *\n   *   // optional options:\n   *   started: 42,                // unix timestamp when the deployment started\n   *   finished: 1337,             // unix timestamp when the deployment finished\n   *   time: 1295,                 // deployment duration in seconds. This can be specified alternatively to `started` and `finished`\n   *   name: 'PickleRick',         // human readable name for this deployment\n   *   url: 'https://example.com', // URL that points to the deployment\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the new release deploy.\n   * @returns {Promise} A promise that resolves when the deploy has been created.\n   * @memberof SentryReleases\n   */\n  newDeploy(release, options) {\n    if (!options || !options.env) {\n      throw new Error('options.env must be a vaild name');\n    }\n    const args = ['releases', 'deploys', release, 'new'];\n    return this.execute(helper.prepareCommand(args, DEPLOYS_SCHEMA, options), null);\n  }\n\n  /**\n   * See {helper.execute} docs.\n   * @param {string[]} args Command line arguments passed to `sentry-cli`.\n   * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n   * @returns {Promise.<string>} A promise that resolves to the standard output.\n   */\n  execute(args, live) {\n    return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n  }\n}\n\nmodule.exports = Releases;\n"]},"metadata":{},"sourceType":"script"}