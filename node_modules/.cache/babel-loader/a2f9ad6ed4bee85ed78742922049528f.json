{"ast":null,"code":"'use strict';\n\nconst helper = require('../helper');\n/**\n * Default arguments for the `--ignore` option.\n * @type {string[]}\n */\n\n\nconst DEFAULT_IGNORE = ['node_modules'];\n/**\n * Schema for the `upload-sourcemaps` command.\n * @type {OptionsSchema}\n */\n\nconst SOURCEMAPS_SCHEMA = require('./options/uploadSourcemaps');\n/**\n * Schema for the `deploys new` command.\n * @type {OptionsSchema}\n */\n\n\nconst DEPLOYS_SCHEMA = require('./options/deploys');\n/**\n * Manages releases and release artifacts on Sentry.\n * @namespace SentryReleases\n */\n\n\nclass Releases {\n  /**\n   * Creates a new `Releases` instance.\n   *\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  constructor(options) {\n    this.options = options || {};\n\n    if (typeof this.options.configFile === 'string') {\n      this.configFile = this.options.configFile;\n    }\n\n    delete this.options.configFile;\n  }\n  /**\n   * Registers a new release with sentry.\n   *\n   * The given release name should be unique and deterministic. It can later be used to\n   * upload artifacts, such as source maps.\n   *\n   * @param {string} release Unique name of the new release.\n   * @param {object} options A set of options when creating a release.\n   * @param {array} options.projects The list of project slugs for a release.\n   * @returns {Promise} A promise that resolves when the release has been created.\n   * @memberof SentryReleases\n   */\n\n\n  new(release, options) {\n    const args = ['releases', 'new', release].concat(helper.getProjectFlagsFromOptions(options));\n    return this.execute(args, null);\n  }\n  /**\n   * Specifies the set of commits covered in this release.\n   *\n   * @param {string} release Unique name of the release\n   * @param {object} options A set of options to configure the commits to include\n   * @param {string} options.repo The full repo name as defined in Sentry\n   * @param {boolean} options.auto Automatically choose the associated commit (uses\n   * the current commit). Overrides other options.\n   * @param {string} options.commit The current (last) commit in the release.\n   * @param {string} options.previousCommit The commit before the beginning of this\n   * release (in other words, the last commit of the previous release). If omitted,\n   * this will default to the last commit of the previous release in Sentry. If there\n   * was no previous release, the last 10 commits will be used.\n   * @returns {Promise} A promise that resolves when the commits have been associated\n   * @memberof SentryReleases\n   */\n\n\n  setCommits(release, options) {\n    if (!options || !options.auto && (!options.repo || !options.commit)) {\n      throw new Error('options.auto, or options.repo and options.commit must be specified');\n    }\n\n    let commitFlags = [];\n\n    if (options.auto) {\n      commitFlags = ['--auto'];\n    } else if (options.previousCommit) {\n      commitFlags = ['--commit', `${options.repo}@${options.previousCommit}..${options.commit}`];\n    } else {\n      commitFlags = ['--commit', `${options.repo}@${options.commit}`];\n    }\n\n    return this.execute(['releases', 'set-commits', release].concat(commitFlags));\n  }\n  /**\n   * Marks this release as complete. This should be called once all artifacts has been\n   * uploaded.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the release has been finalized.\n   * @memberof SentryReleases\n   */\n\n\n  finalize(release) {\n    return this.execute(['releases', 'finalize', release], null);\n  }\n  /**\n   * Creates a unique, deterministic version identifier based on the project type and\n   * source files. This identifier can be used as release name.\n   *\n   * @returns {Promise.<string>} A promise that resolves to the version string.\n   * @memberof SentryReleases\n   */\n\n\n  proposeVersion() {\n    return this.execute(['releases', 'propose-version'], null).then(version => version && version.trim());\n  }\n  /**\n   * Scans the given include folders for JavaScript source maps and uploads them to the\n   * specified release for processing.\n   *\n   * The options require an `include` array, which is a list of directories to scan.\n   * Additionally, it supports to ignore certain files, validate and preprocess source\n   * maps and define a URL prefix.\n   *\n   * @example\n   * await cli.releases.uploadSourceMaps(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   include: ['build'],\n   *\n   *   // default options:\n   *   ignore: ['node_modules'],  // globs for files to ignore\n   *   ignoreFile: null,          // path to a file with ignore rules\n   *   rewrite: false,            // preprocess sourcemaps before uploading\n   *   sourceMapReference: true,  // add a source map reference to source files\n   *   stripPrefix: [],           // remove certain prefices from filenames\n   *   stripCommonPrefix: false,  // guess common prefices to remove from filenames\n   *   validate: false,           // validate source maps and cancel the upload on error\n   *   urlPrefix: '',             // add a prefix source map urls after stripping them\n   *   urlSuffix: '',             // add a suffix source map urls after stripping them\n   *   ext: ['js', 'map', 'jsbundle', 'bundle'],  // override file extensions to scan for\n   *   projects: ['node']        // provide a list of projects\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the source map upload.\n   * @returns {Promise} A promise that resolves when the upload has completed successfully.\n   * @memberof SentryReleases\n   */\n\n\n  uploadSourceMaps(release, options) {\n    if (!options || !options.include) {\n      throw new Error('options.include must be a vaild path(s)');\n    }\n\n    const uploads = options.include.map(sourcemapPath => {\n      const newOptions = { ...options\n      };\n\n      if (!newOptions.ignoreFile && !newOptions.ignore) {\n        newOptions.ignore = DEFAULT_IGNORE;\n      }\n\n      const args = ['releases'].concat(helper.getProjectFlagsFromOptions(options)).concat(['files', release, 'upload-sourcemaps', sourcemapPath]);\n      return this.execute(helper.prepareCommand(args, SOURCEMAPS_SCHEMA, newOptions), true);\n    });\n    return Promise.all(uploads);\n  }\n  /**\n   * List all deploys for a given release.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the list comes back from the server.\n   * @memberof SentryReleases\n   */\n\n\n  listDeploys(release) {\n    return this.execute(['releases', 'deploys', release, 'list'], null);\n  }\n  /**\n   * Creates a new release deployment. This should be called after the release has been\n   * finalized, while deploying on a given environment.\n   *\n   * @example\n   * await cli.releases.newDeploy(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   env: 'production',          // environment for this release. Values that make sense here would be 'production' or 'staging'\n   *\n   *   // optional options:\n   *   started: 42,                // unix timestamp when the deployment started\n   *   finished: 1337,             // unix timestamp when the deployment finished\n   *   time: 1295,                 // deployment duration in seconds. This can be specified alternatively to `started` and `finished`\n   *   name: 'PickleRick',         // human readable name for this deployment\n   *   url: 'https://example.com', // URL that points to the deployment\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the new release deploy.\n   * @returns {Promise} A promise that resolves when the deploy has been created.\n   * @memberof SentryReleases\n   */\n\n\n  newDeploy(release, options) {\n    if (!options || !options.env) {\n      throw new Error('options.env must be a vaild name');\n    }\n\n    const args = ['releases', 'deploys', release, 'new'];\n    return this.execute(helper.prepareCommand(args, DEPLOYS_SCHEMA, options), null);\n  }\n  /**\n   * See {helper.execute} docs.\n   * @param {string[]} args Command line arguments passed to `sentry-cli`.\n   * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n   * @returns {Promise.<string>} A promise that resolves to the standard output.\n   */\n\n\n  execute(args, live) {\n    return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n  }\n\n}\n\nmodule.exports = Releases;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/@sentry/cli/js/releases/index.js"],"names":["helper","require","DEFAULT_IGNORE","SOURCEMAPS_SCHEMA","DEPLOYS_SCHEMA","Releases","constructor","options","configFile","new","release","args","concat","getProjectFlagsFromOptions","execute","setCommits","auto","repo","commit","Error","commitFlags","previousCommit","finalize","proposeVersion","then","version","trim","uploadSourceMaps","include","uploads","map","sourcemapPath","newOptions","ignoreFile","ignore","prepareCommand","Promise","all","listDeploys","newDeploy","env","live","silent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst helper = require('../helper');\n\n/**\n * Default arguments for the `--ignore` option.\n * @type {string[]}\n */\nconst DEFAULT_IGNORE = ['node_modules'];\n\n/**\n * Schema for the `upload-sourcemaps` command.\n * @type {OptionsSchema}\n */\nconst SOURCEMAPS_SCHEMA = require('./options/uploadSourcemaps');\n\n/**\n * Schema for the `deploys new` command.\n * @type {OptionsSchema}\n */\nconst DEPLOYS_SCHEMA = require('./options/deploys');\n\n/**\n * Manages releases and release artifacts on Sentry.\n * @namespace SentryReleases\n */\nclass Releases {\n  /**\n   * Creates a new `Releases` instance.\n   *\n   * @param {Object} [options] More options to pass to the CLI\n   */\n  constructor(options) {\n    this.options = options || {};\n    if (typeof this.options.configFile === 'string') {\n      this.configFile = this.options.configFile;\n    }\n    delete this.options.configFile;\n  }\n\n  /**\n   * Registers a new release with sentry.\n   *\n   * The given release name should be unique and deterministic. It can later be used to\n   * upload artifacts, such as source maps.\n   *\n   * @param {string} release Unique name of the new release.\n   * @param {object} options A set of options when creating a release.\n   * @param {array} options.projects The list of project slugs for a release.\n   * @returns {Promise} A promise that resolves when the release has been created.\n   * @memberof SentryReleases\n   */\n  new(release, options) {\n    const args = ['releases', 'new', release].concat(helper.getProjectFlagsFromOptions(options));\n    return this.execute(args, null);\n  }\n\n  /**\n   * Specifies the set of commits covered in this release.\n   *\n   * @param {string} release Unique name of the release\n   * @param {object} options A set of options to configure the commits to include\n   * @param {string} options.repo The full repo name as defined in Sentry\n   * @param {boolean} options.auto Automatically choose the associated commit (uses\n   * the current commit). Overrides other options.\n   * @param {string} options.commit The current (last) commit in the release.\n   * @param {string} options.previousCommit The commit before the beginning of this\n   * release (in other words, the last commit of the previous release). If omitted,\n   * this will default to the last commit of the previous release in Sentry. If there\n   * was no previous release, the last 10 commits will be used.\n   * @returns {Promise} A promise that resolves when the commits have been associated\n   * @memberof SentryReleases\n   */\n  setCommits(release, options) {\n    if (!options || (!options.auto && (!options.repo || !options.commit))) {\n      throw new Error('options.auto, or options.repo and options.commit must be specified');\n    }\n\n    let commitFlags = [];\n\n    if (options.auto) {\n      commitFlags = ['--auto'];\n    } else if (options.previousCommit) {\n      commitFlags = ['--commit', `${options.repo}@${options.previousCommit}..${options.commit}`];\n    } else {\n      commitFlags = ['--commit', `${options.repo}@${options.commit}`];\n    }\n\n    return this.execute(['releases', 'set-commits', release].concat(commitFlags));\n  }\n\n  /**\n   * Marks this release as complete. This should be called once all artifacts has been\n   * uploaded.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the release has been finalized.\n   * @memberof SentryReleases\n   */\n  finalize(release) {\n    return this.execute(['releases', 'finalize', release], null);\n  }\n\n  /**\n   * Creates a unique, deterministic version identifier based on the project type and\n   * source files. This identifier can be used as release name.\n   *\n   * @returns {Promise.<string>} A promise that resolves to the version string.\n   * @memberof SentryReleases\n   */\n  proposeVersion() {\n    return this.execute(['releases', 'propose-version'], null).then(\n      version => version && version.trim()\n    );\n  }\n\n  /**\n   * Scans the given include folders for JavaScript source maps and uploads them to the\n   * specified release for processing.\n   *\n   * The options require an `include` array, which is a list of directories to scan.\n   * Additionally, it supports to ignore certain files, validate and preprocess source\n   * maps and define a URL prefix.\n   *\n   * @example\n   * await cli.releases.uploadSourceMaps(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   include: ['build'],\n   *\n   *   // default options:\n   *   ignore: ['node_modules'],  // globs for files to ignore\n   *   ignoreFile: null,          // path to a file with ignore rules\n   *   rewrite: false,            // preprocess sourcemaps before uploading\n   *   sourceMapReference: true,  // add a source map reference to source files\n   *   stripPrefix: [],           // remove certain prefices from filenames\n   *   stripCommonPrefix: false,  // guess common prefices to remove from filenames\n   *   validate: false,           // validate source maps and cancel the upload on error\n   *   urlPrefix: '',             // add a prefix source map urls after stripping them\n   *   urlSuffix: '',             // add a suffix source map urls after stripping them\n   *   ext: ['js', 'map', 'jsbundle', 'bundle'],  // override file extensions to scan for\n   *   projects: ['node']        // provide a list of projects\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the source map upload.\n   * @returns {Promise} A promise that resolves when the upload has completed successfully.\n   * @memberof SentryReleases\n   */\n  uploadSourceMaps(release, options) {\n    if (!options || !options.include) {\n      throw new Error('options.include must be a vaild path(s)');\n    }\n\n    const uploads = options.include.map(sourcemapPath => {\n      const newOptions = { ...options };\n      if (!newOptions.ignoreFile && !newOptions.ignore) {\n        newOptions.ignore = DEFAULT_IGNORE;\n      }\n\n      const args = ['releases']\n        .concat(helper.getProjectFlagsFromOptions(options))\n        .concat(['files', release, 'upload-sourcemaps', sourcemapPath]);\n      return this.execute(helper.prepareCommand(args, SOURCEMAPS_SCHEMA, newOptions), true);\n    });\n\n    return Promise.all(uploads);\n  }\n\n  /**\n   * List all deploys for a given release.\n   *\n   * @param {string} release Unique name of the release.\n   * @returns {Promise} A promise that resolves when the list comes back from the server.\n   * @memberof SentryReleases\n   */\n  listDeploys(release) {\n    return this.execute(['releases', 'deploys', release, 'list'], null);\n  }\n\n  /**\n   * Creates a new release deployment. This should be called after the release has been\n   * finalized, while deploying on a given environment.\n   *\n   * @example\n   * await cli.releases.newDeploy(cli.releases.proposeVersion(), {\n   *   // required options:\n   *   env: 'production',          // environment for this release. Values that make sense here would be 'production' or 'staging'\n   *\n   *   // optional options:\n   *   started: 42,                // unix timestamp when the deployment started\n   *   finished: 1337,             // unix timestamp when the deployment finished\n   *   time: 1295,                 // deployment duration in seconds. This can be specified alternatively to `started` and `finished`\n   *   name: 'PickleRick',         // human readable name for this deployment\n   *   url: 'https://example.com', // URL that points to the deployment\n   * });\n   *\n   * @param {string} release Unique name of the release.\n   * @param {object} options Options to configure the new release deploy.\n   * @returns {Promise} A promise that resolves when the deploy has been created.\n   * @memberof SentryReleases\n   */\n  newDeploy(release, options) {\n    if (!options || !options.env) {\n      throw new Error('options.env must be a vaild name');\n    }\n    const args = ['releases', 'deploys', release, 'new'];\n    return this.execute(helper.prepareCommand(args, DEPLOYS_SCHEMA, options), null);\n  }\n\n  /**\n   * See {helper.execute} docs.\n   * @param {string[]} args Command line arguments passed to `sentry-cli`.\n   * @param {boolean} live We inherit stdio to display `sentry-cli` output directly.\n   * @returns {Promise.<string>} A promise that resolves to the standard output.\n   */\n  execute(args, live) {\n    return helper.execute(args, live, this.options.silent, this.configFile, this.options);\n  }\n}\n\nmodule.exports = Releases;\n"]},"metadata":{},"sourceType":"script"}