{"ast":null,"code":"let Declaration = require('../declaration');\n\nlet {\n  prefixTrackProp,\n  prefixTrackValue,\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap\n} = require('./grid-utils');\n\nlet Processor = require('../processor');\n\nclass GridRowsColumns extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({\n        prop,\n        prefix\n      });\n    }\n\n    return super.prefixed(prop, prefix);\n  }\n  /**\n   * Change IE property back\n   */\n\n\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');\n  }\n\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    let {\n      parent,\n      prop,\n      value\n    } = decl;\n    let isRowProp = prop.includes('rows');\n    let isColumnProp = prop.includes('columns');\n    let hasGridTemplate = parent.some(i => i.prop === 'grid-template' || i.prop === 'grid-template-areas');\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n\n    if (hasGridTemplate && isRowProp) {\n      return false;\n    }\n\n    let processor = new Processor({\n      options: {}\n    });\n    let status = processor.gridStatus(parent, result);\n    let gap = getGridGap(decl);\n    gap = inheritGridGap(decl, gap) || gap;\n    let gapValue = isRowProp ? gap.row : gap.column;\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null;\n    }\n\n    let prefixValue = prefixTrackValue({\n      value,\n      gap: gapValue\n    });\n    /**\n     * Insert prefixes\n     */\n\n    decl.cloneBefore({\n      prop: prefixTrackProp({\n        prop,\n        prefix\n      }),\n      value: prefixValue\n    });\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow');\n    let autoflowValue = 'row';\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim();\n    }\n\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined;\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-rows property');\n        return undefined;\n      }\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n\n\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns';\n      });\n\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-columns property');\n      }\n      /**\n       * Autoplace grid items\n       */\n\n\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue);\n      }\n    }\n\n    return undefined;\n  }\n\n}\n\nGridRowsColumns.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];\nmodule.exports = GridRowsColumns;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/grid-rows-columns.js"],"names":["Declaration","require","prefixTrackProp","prefixTrackValue","autoplaceGridItems","getGridGap","inheritGridGap","Processor","GridRowsColumns","prefixed","prop","prefix","normalize","replace","insert","decl","prefixes","result","parent","value","isRowProp","includes","isColumnProp","hasGridTemplate","some","i","processor","options","status","gridStatus","gap","gapValue","row","column","prefixValue","cloneBefore","autoflow","nodes","find","autoflowValue","disabled","trim","rowDecl","undefined","warn","columnDecl","names","module","exports"],"mappings":"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","sourcesContent":["let Declaration = require('../declaration')\nlet {\n  prefixTrackProp,\n  prefixTrackValue,\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap\n} = require('./grid-utils')\nlet Processor = require('../processor')\n\nclass GridRowsColumns extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed (prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({ prop, prefix })\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize (prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')\n  }\n\n  insert (decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let { parent, prop, value } = decl\n    let isRowProp = prop.includes('rows')\n    let isColumnProp = prop.includes('columns')\n\n    let hasGridTemplate = parent.some(\n      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n    )\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false\n    }\n\n    let processor = new Processor({ options: {} })\n    let status = processor.gridStatus(parent, result)\n    let gap = getGridGap(decl)\n    gap = inheritGridGap(decl, gap) || gap\n\n    let gapValue = isRowProp ? gap.row : gap.column\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null\n    }\n\n    let prefixValue = prefixTrackValue({\n      value,\n      gap: gapValue\n    })\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({ prop, prefix }),\n      value: prefixValue\n    })\n\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow')\n    let autoflowValue = 'row'\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim()\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-rows property'\n        )\n        return undefined\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns'\n      })\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-columns property'\n        )\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue)\n      }\n    }\n\n    return undefined\n  }\n}\n\nGridRowsColumns.names = [\n  'grid-template-rows',\n  'grid-template-columns',\n  'grid-rows',\n  'grid-columns'\n]\n\nmodule.exports = GridRowsColumns\n"]},"metadata":{},"sourceType":"script"}