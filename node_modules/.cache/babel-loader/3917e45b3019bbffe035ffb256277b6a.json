{"ast":null,"code":"let Declaration = require('../declaration');\n\nclass MaskComposite extends Declaration {\n  /**\n   * Prefix mask-composite for webkit\n   */\n  insert(decl, prefix, prefixes) {\n    let isCompositeProp = decl.prop === 'mask-composite';\n    let compositeValues;\n\n    if (isCompositeProp) {\n      compositeValues = decl.value.split(',');\n    } else {\n      compositeValues = decl.value.match(MaskComposite.regexp) || [];\n    }\n\n    compositeValues = compositeValues.map(el => el.trim()).filter(el => el);\n    let hasCompositeValues = compositeValues.length;\n    let compositeDecl;\n\n    if (hasCompositeValues) {\n      compositeDecl = this.clone(decl);\n      compositeDecl.value = compositeValues.map(value => MaskComposite.oldValues[value] || value).join(', ');\n\n      if (compositeValues.includes('intersect')) {\n        compositeDecl.value += ', xor';\n      }\n\n      compositeDecl.prop = prefix + 'mask-composite';\n    }\n\n    if (isCompositeProp) {\n      if (!hasCompositeValues) {\n        return undefined;\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl);\n    }\n\n    let cloned = this.clone(decl);\n    cloned.prop = prefix + cloned.prop;\n\n    if (hasCompositeValues) {\n      cloned.value = cloned.value.replace(MaskComposite.regexp, '');\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n\n    decl.parent.insertBefore(decl, cloned);\n\n    if (!hasCompositeValues) {\n      return decl;\n    }\n\n    if (this.needCascade(decl)) {\n      compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n\n    return decl.parent.insertBefore(decl, compositeDecl);\n  }\n\n}\n\nMaskComposite.names = ['mask', 'mask-composite'];\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n};\nMaskComposite.regexp = new RegExp(`\\\\s+(${Object.keys(MaskComposite.oldValues).join('|')})\\\\b(?!\\\\))\\\\s*(?=[,])`, 'ig');\nmodule.exports = MaskComposite;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/mask-composite.js"],"names":["Declaration","require","MaskComposite","insert","decl","prefix","prefixes","isCompositeProp","prop","compositeValues","value","split","match","regexp","map","el","trim","filter","hasCompositeValues","length","compositeDecl","clone","oldValues","join","includes","undefined","needCascade","raws","before","calcBefore","parent","insertBefore","cloned","replace","names","add","subtract","intersect","exclude","RegExp","Object","keys","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,MAAMC,aAAN,SAA4BF,WAA5B,CAAwC;AACtC;AACF;AACA;AACEG,EAAAA,MAAM,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,QAAhB,EAA0B;AAC9B,QAAIC,eAAe,GAAGH,IAAI,CAACI,IAAL,KAAc,gBAApC;AAEA,QAAIC,eAAJ;;AAEA,QAAIF,eAAJ,EAAqB;AACnBE,MAAAA,eAAe,GAAGL,IAAI,CAACM,KAAL,CAAWC,KAAX,CAAiB,GAAjB,CAAlB;AACD,KAFD,MAEO;AACLF,MAAAA,eAAe,GAAGL,IAAI,CAACM,KAAL,CAAWE,KAAX,CAAiBV,aAAa,CAACW,MAA/B,KAA0C,EAA5D;AACD;;AAEDJ,IAAAA,eAAe,GAAGA,eAAe,CAACK,GAAhB,CAAoBC,EAAE,IAAIA,EAAE,CAACC,IAAH,EAA1B,EAAqCC,MAArC,CAA4CF,EAAE,IAAIA,EAAlD,CAAlB;AACA,QAAIG,kBAAkB,GAAGT,eAAe,CAACU,MAAzC;AAEA,QAAIC,aAAJ;;AAEA,QAAIF,kBAAJ,EAAwB;AACtBE,MAAAA,aAAa,GAAG,KAAKC,KAAL,CAAWjB,IAAX,CAAhB;AACAgB,MAAAA,aAAa,CAACV,KAAd,GAAsBD,eAAe,CAClCK,GADmB,CACfJ,KAAK,IAAIR,aAAa,CAACoB,SAAd,CAAwBZ,KAAxB,KAAkCA,KAD5B,EAEnBa,IAFmB,CAEd,IAFc,CAAtB;;AAIA,UAAId,eAAe,CAACe,QAAhB,CAAyB,WAAzB,CAAJ,EAA2C;AACzCJ,QAAAA,aAAa,CAACV,KAAd,IAAuB,OAAvB;AACD;;AAEDU,MAAAA,aAAa,CAACZ,IAAd,GAAqBH,MAAM,GAAG,gBAA9B;AACD;;AAED,QAAIE,eAAJ,EAAqB;AACnB,UAAI,CAACW,kBAAL,EAAyB;AACvB,eAAOO,SAAP;AACD;;AAED,UAAI,KAAKC,WAAL,CAAiBtB,IAAjB,CAAJ,EAA4B;AAC1BgB,QAAAA,aAAa,CAACO,IAAd,CAAmBC,MAAnB,GAA4B,KAAKC,UAAL,CAAgBvB,QAAhB,EAA0BF,IAA1B,EAAgCC,MAAhC,CAA5B;AACD;;AAED,aAAOD,IAAI,CAAC0B,MAAL,CAAYC,YAAZ,CAAyB3B,IAAzB,EAA+BgB,aAA/B,CAAP;AACD;;AAED,QAAIY,MAAM,GAAG,KAAKX,KAAL,CAAWjB,IAAX,CAAb;AACA4B,IAAAA,MAAM,CAACxB,IAAP,GAAcH,MAAM,GAAG2B,MAAM,CAACxB,IAA9B;;AAEA,QAAIU,kBAAJ,EAAwB;AACtBc,MAAAA,MAAM,CAACtB,KAAP,GAAesB,MAAM,CAACtB,KAAP,CAAauB,OAAb,CAAqB/B,aAAa,CAACW,MAAnC,EAA2C,EAA3C,CAAf;AACD;;AAED,QAAI,KAAKa,WAAL,CAAiBtB,IAAjB,CAAJ,EAA4B;AAC1B4B,MAAAA,MAAM,CAACL,IAAP,CAAYC,MAAZ,GAAqB,KAAKC,UAAL,CAAgBvB,QAAhB,EAA0BF,IAA1B,EAAgCC,MAAhC,CAArB;AACD;;AAEDD,IAAAA,IAAI,CAAC0B,MAAL,CAAYC,YAAZ,CAAyB3B,IAAzB,EAA+B4B,MAA/B;;AAEA,QAAI,CAACd,kBAAL,EAAyB;AACvB,aAAOd,IAAP;AACD;;AAED,QAAI,KAAKsB,WAAL,CAAiBtB,IAAjB,CAAJ,EAA4B;AAC1BgB,MAAAA,aAAa,CAACO,IAAd,CAAmBC,MAAnB,GAA4B,KAAKC,UAAL,CAAgBvB,QAAhB,EAA0BF,IAA1B,EAAgCC,MAAhC,CAA5B;AACD;;AACD,WAAOD,IAAI,CAAC0B,MAAL,CAAYC,YAAZ,CAAyB3B,IAAzB,EAA+BgB,aAA/B,CAAP;AACD;;AAlEqC;;AAqExClB,aAAa,CAACgC,KAAd,GAAsB,CAAC,MAAD,EAAS,gBAAT,CAAtB;AAEAhC,aAAa,CAACoB,SAAd,GAA0B;AACxBa,EAAAA,GAAG,EAAE,aADmB;AAExBC,EAAAA,QAAQ,EAAE,YAFc;AAGxBC,EAAAA,SAAS,EAAE,WAHa;AAIxBC,EAAAA,OAAO,EAAE;AAJe,CAA1B;AAOApC,aAAa,CAACW,MAAd,GAAuB,IAAI0B,MAAJ,CACpB,QAAOC,MAAM,CAACC,IAAP,CAAYvC,aAAa,CAACoB,SAA1B,EAAqCC,IAArC,CACN,GADM,CAEN,wBAHmB,EAIrB,IAJqB,CAAvB;AAOAmB,MAAM,CAACC,OAAP,GAAiBzC,aAAjB","sourcesContent":["let Declaration = require('../declaration')\n\nclass MaskComposite extends Declaration {\n  /**\n   * Prefix mask-composite for webkit\n   */\n  insert (decl, prefix, prefixes) {\n    let isCompositeProp = decl.prop === 'mask-composite'\n\n    let compositeValues\n\n    if (isCompositeProp) {\n      compositeValues = decl.value.split(',')\n    } else {\n      compositeValues = decl.value.match(MaskComposite.regexp) || []\n    }\n\n    compositeValues = compositeValues.map(el => el.trim()).filter(el => el)\n    let hasCompositeValues = compositeValues.length\n\n    let compositeDecl\n\n    if (hasCompositeValues) {\n      compositeDecl = this.clone(decl)\n      compositeDecl.value = compositeValues\n        .map(value => MaskComposite.oldValues[value] || value)\n        .join(', ')\n\n      if (compositeValues.includes('intersect')) {\n        compositeDecl.value += ', xor'\n      }\n\n      compositeDecl.prop = prefix + 'mask-composite'\n    }\n\n    if (isCompositeProp) {\n      if (!hasCompositeValues) {\n        return undefined\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl)\n    }\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + cloned.prop\n\n    if (hasCompositeValues) {\n      cloned.value = cloned.value.replace(MaskComposite.regexp, '')\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n\n    decl.parent.insertBefore(decl, cloned)\n\n    if (!hasCompositeValues) {\n      return decl\n    }\n\n    if (this.needCascade(decl)) {\n      compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, compositeDecl)\n  }\n}\n\nMaskComposite.names = ['mask', 'mask-composite']\n\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n}\n\nMaskComposite.regexp = new RegExp(\n  `\\\\s+(${Object.keys(MaskComposite.oldValues).join(\n    '|'\n  )})\\\\b(?!\\\\))\\\\s*(?=[,])`,\n  'ig'\n)\n\nmodule.exports = MaskComposite\n"]},"metadata":{},"sourceType":"script"}