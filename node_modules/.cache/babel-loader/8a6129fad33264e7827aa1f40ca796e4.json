{"ast":null,"code":"let Declaration = require('../declaration');\n\nlet utils = require('./grid-utils');\n\nclass GridArea extends Declaration {\n  /**\n   * Translate grid-area to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    let values = utils.parse(decl);\n    let [rowStart, rowSpan] = utils.translate(values, 0, 2);\n    let [columnStart, columnSpan] = utils.translate(values, 1, 3);\n    [['grid-row', rowStart], ['grid-row-span', rowSpan], ['grid-column', columnStart], ['grid-column-span', columnSpan]].forEach(([prop, value]) => {\n      utils.insertDecl(decl, prop, value);\n    });\n    utils.warnTemplateSelectorNotFound(decl, result);\n    utils.warnIfGridRowColumnExists(decl, result);\n    return undefined;\n  }\n\n}\n\nGridArea.names = ['grid-area'];\nmodule.exports = GridArea;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/grid-area.js"],"names":["Declaration","require","utils","GridArea","insert","decl","prefix","prefixes","result","values","parse","rowStart","rowSpan","translate","columnStart","columnSpan","forEach","prop","value","insertDecl","warnTemplateSelectorNotFound","warnIfGridRowColumnExists","undefined","names","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAME,QAAN,SAAuBH,WAAvB,CAAmC;AACjC;AACF;AACA;AACEI,EAAAA,MAAM,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACtC,QAAIF,MAAM,KAAK,MAAf,EAAuB,OAAO,MAAMF,MAAN,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAP;AAEvB,QAAIE,MAAM,GAAGP,KAAK,CAACQ,KAAN,CAAYL,IAAZ,CAAb;AAEA,QAAI,CAACM,QAAD,EAAWC,OAAX,IAAsBV,KAAK,CAACW,SAAN,CAAgBJ,MAAhB,EAAwB,CAAxB,EAA2B,CAA3B,CAA1B;AACA,QAAI,CAACK,WAAD,EAAcC,UAAd,IAA4Bb,KAAK,CAACW,SAAN,CAAgBJ,MAAhB,EAAwB,CAAxB,EAA2B,CAA3B,CAAhC;AAEC,KACC,CAAC,UAAD,EAAaE,QAAb,CADD,EAEC,CAAC,eAAD,EAAkBC,OAAlB,CAFD,EAGC,CAAC,aAAD,EAAgBE,WAAhB,CAHD,EAIC,CAAC,kBAAD,EAAqBC,UAArB,CAJD,EAKCC,OALD,CAKS,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB;AAC3BhB,MAAAA,KAAK,CAACiB,UAAN,CAAiBd,IAAjB,EAAuBY,IAAvB,EAA6BC,KAA7B;AACD,KAPA;AASDhB,IAAAA,KAAK,CAACkB,4BAAN,CAAmCf,IAAnC,EAAyCG,MAAzC;AACAN,IAAAA,KAAK,CAACmB,yBAAN,CAAgChB,IAAhC,EAAsCG,MAAtC;AAEA,WAAOc,SAAP;AACD;;AAzBgC;;AA4BnCnB,QAAQ,CAACoB,KAAT,GAAiB,CAAC,WAAD,CAAjB;AAEAC,MAAM,CAACC,OAAP,GAAiBtB,QAAjB","sourcesContent":["let Declaration = require('../declaration')\nlet utils = require('./grid-utils')\n\nclass GridArea extends Declaration {\n  /**\n   * Translate grid-area to separate -ms- prefixed properties\n   */\n  insert (decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let values = utils.parse(decl)\n\n    let [rowStart, rowSpan] = utils.translate(values, 0, 2)\n    let [columnStart, columnSpan] = utils.translate(values, 1, 3)\n\n    ;[\n      ['grid-row', rowStart],\n      ['grid-row-span', rowSpan],\n      ['grid-column', columnStart],\n      ['grid-column-span', columnSpan]\n    ].forEach(([prop, value]) => {\n      utils.insertDecl(decl, prop, value)\n    })\n\n    utils.warnTemplateSelectorNotFound(decl, result)\n    utils.warnIfGridRowColumnExists(decl, result)\n\n    return undefined\n  }\n}\n\nGridArea.names = ['grid-area']\n\nmodule.exports = GridArea\n"]},"metadata":{},"sourceType":"script"}