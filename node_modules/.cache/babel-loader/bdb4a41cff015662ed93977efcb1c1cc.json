{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js\";\n\n/* eslint-disable import/no-cycle */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos, Register } from \"./pages\";\nimport SentryComponent from \"./components/SentryComponent/SentryComponent\";\nexport const routeConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false\n  },\n  register: {\n    path: \"/register\",\n    component: Register,\n    privateRoute: false\n  },\n  test: {\n    path: \"/test\",\n    component: SentryComponent,\n    routes: {\n      testSentry: {\n        path: \"/test/sentry\",\n        component: () => {\n          const a = {};\n          console.log(a.b.c);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"test Sentry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 18\n          }, this);\n        }\n      }\n    }\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true\n  },\n  noMatch: {\n    path: \"*\",\n    component: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 22\n    }, this),\n    privateRoute: false\n  }\n};\n\nfunction RouteConfig(props) {\n  const {\n    routes,\n    authState,\n    ...rest\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: Object.values(routes).map(route => /*#__PURE__*/_jsxDEV(Route, {\n        path: route.path,\n        render: () => {\n          return !(!authState.signIn && route.privateRoute) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(route.component, {\n              routes: route.routes,\n              authState: authState,\n              ...rest\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(Redirect, {\n            to: {\n              pathname: routeConfig.login.path,\n              state: {\n                from: route.path\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this);\n        }\n      }, route.path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RouteConfig;\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false\n  },\n  routes: undefined\n};\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool\n  }),\n  routes: PropTypes.objectOf(PropTypes.object)\n};\n\nconst mapStateToProps = state => ({\n  authState: state.authState\n});\n\nexport default connect(mapStateToProps)(RouteConfig);\n\nvar _c;\n\n$RefreshReg$(_c, \"RouteConfig\");","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/src/router.js"],"names":["React","connect","BrowserRouter","Router","Switch","Route","Redirect","PropTypes","Login","Todos","Register","SentryComponent","routeConfig","login","path","component","privateRoute","register","test","routes","testSentry","a","console","log","b","c","home","noMatch","RouteConfig","props","authState","rest","Object","values","map","route","signIn","pathname","state","from","defaultProps","undefined","propTypes","exact","bool","objectOf","object","mapStateToProps"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Login, Todos, Register } from \"./pages\";\nimport SentryComponent from \"./components/SentryComponent/SentryComponent\";\n\nexport const routeConfig = {\n  login: {\n    path: \"/login\",\n    component: Login,\n    privateRoute: false,\n  },\n  register: {\n    path: \"/register\",\n    component: Register,\n    privateRoute: false,\n  },\n  test: {\n    path: \"/test\",\n    component: SentryComponent,\n    routes: {\n      testSentry: {\n        path: \"/test/sentry\",\n        component: () => {\n          const a = {};\n          console.log(a.b.c);\n          return <div>test Sentry</div>;\n        },\n      },\n    },\n  },\n  home: {\n    path: \"/\",\n    component: Todos,\n    privateRoute: true,\n  },\n  noMatch: {\n    path: \"*\",\n    component: () => <div>No Match</div>,\n    privateRoute: false,\n  },\n};\n\nfunction RouteConfig(props) {\n  const { routes, authState, ...rest } = props;\n  return (\n    <Router>\n      <Switch>\n        {Object.values(routes).map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            render={() => {\n              return !(!authState.signIn && route.privateRoute) ? (\n                <>\n                  <route.component\n                    routes={route.routes}\n                    authState={authState}\n                    {...rest}\n                  />\n                </>\n              ) : (\n                <Redirect\n                  to={{\n                    pathname: routeConfig.login.path,\n                    state: { from: route.path },\n                  }}\n                />\n              );\n            }}\n          />\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n\nRouteConfig.defaultProps = {\n  authState: {\n    signIn: false,\n  },\n  routes: undefined,\n};\nRouteConfig.propTypes = {\n  authState: PropTypes.exact({\n    signIn: PropTypes.bool,\n  }),\n  routes: PropTypes.objectOf(PropTypes.object),\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.authState,\n});\nexport default connect(mapStateToProps)(RouteConfig);\n"]},"metadata":{},"sourceType":"module"}