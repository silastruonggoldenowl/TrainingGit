{"ast":null,"code":"let Declaration = require('../declaration');\n\nlet {\n  parseTemplate,\n  warnMissedAreas,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils');\n\nclass GridTemplate extends Declaration {\n  /**\n   * Translate grid-template to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n\n    if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {\n      return undefined;\n    }\n\n    let gap = getGridGap(decl);\n    /**\n     * we must insert inherited gap values in some cases:\n     * if we are inside media query && if we have no grid-gap value\n     */\n\n    let inheritedGap = inheritGridGap(decl, gap);\n    let {\n      rows,\n      columns,\n      areas\n    } = parseTemplate({\n      decl,\n      gap: inheritedGap || gap\n    });\n    let hasAreas = Object.keys(areas).length > 0;\n    let hasRows = Boolean(rows);\n    let hasColumns = Boolean(columns);\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    });\n    warnMissedAreas(areas, decl, result);\n\n    if (hasRows && hasColumns || hasAreas) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: rows,\n        raws: {}\n      });\n    }\n\n    if (hasColumns) {\n      decl.cloneBefore({\n        prop: '-ms-grid-columns',\n        value: columns,\n        raws: {}\n      });\n    }\n\n    return decl;\n  }\n\n}\n\nGridTemplate.names = ['grid-template'];\nmodule.exports = GridTemplate;","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/hacks/grid-template.js"],"names":["Declaration","require","parseTemplate","warnMissedAreas","getGridGap","warnGridGap","inheritGridGap","GridTemplate","insert","decl","prefix","prefixes","result","parent","some","i","prop","undefined","gap","inheritedGap","rows","columns","areas","hasAreas","Object","keys","length","hasRows","Boolean","hasColumns","cloneBefore","value","raws","names","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAI;AACFC,EAAAA,aADE;AAEFC,EAAAA,eAFE;AAGFC,EAAAA,UAHE;AAIFC,EAAAA,WAJE;AAKFC,EAAAA;AALE,IAMAL,OAAO,CAAC,cAAD,CANX;;AAQA,MAAMM,YAAN,SAA2BP,WAA3B,CAAuC;AACrC;AACF;AACA;AACEQ,EAAAA,MAAM,CAAEC,IAAF,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkC;AACtC,QAAIF,MAAM,KAAK,MAAf,EAAuB,OAAO,MAAMF,MAAN,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAP;;AAEvB,QAAIF,IAAI,CAACI,MAAL,CAAYC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,eAAjC,CAAJ,EAAuD;AACrD,aAAOC,SAAP;AACD;;AAED,QAAIC,GAAG,GAAGd,UAAU,CAACK,IAAD,CAApB;AAEA;AACJ;AACA;AACA;;AACI,QAAIU,YAAY,GAAGb,cAAc,CAACG,IAAD,EAAOS,GAAP,CAAjC;AAEA,QAAI;AAAEE,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA2BpB,aAAa,CAAC;AAC3CO,MAAAA,IAD2C;AAE3CS,MAAAA,GAAG,EAAEC,YAAY,IAAID;AAFsB,KAAD,CAA5C;AAKA,QAAIK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,MAAnB,GAA4B,CAA3C;AACA,QAAIC,OAAO,GAAGC,OAAO,CAACR,IAAD,CAArB;AACA,QAAIS,UAAU,GAAGD,OAAO,CAACP,OAAD,CAAxB;AAEAhB,IAAAA,WAAW,CAAC;AACVa,MAAAA,GADU;AAEVW,MAAAA,UAFU;AAGVpB,MAAAA,IAHU;AAIVG,MAAAA;AAJU,KAAD,CAAX;AAOAT,IAAAA,eAAe,CAACmB,KAAD,EAAQb,IAAR,EAAcG,MAAd,CAAf;;AAEA,QAAKe,OAAO,IAAIE,UAAZ,IAA2BN,QAA/B,EAAyC;AACvCd,MAAAA,IAAI,CAACqB,WAAL,CAAiB;AACfd,QAAAA,IAAI,EAAE,eADS;AAEfe,QAAAA,KAAK,EAAEX,IAFQ;AAGfY,QAAAA,IAAI,EAAE;AAHS,OAAjB;AAKD;;AAED,QAAIH,UAAJ,EAAgB;AACdpB,MAAAA,IAAI,CAACqB,WAAL,CAAiB;AACfd,QAAAA,IAAI,EAAE,kBADS;AAEfe,QAAAA,KAAK,EAAEV,OAFQ;AAGfW,QAAAA,IAAI,EAAE;AAHS,OAAjB;AAKD;;AAED,WAAOvB,IAAP;AACD;;AAtDoC;;AAyDvCF,YAAY,CAAC0B,KAAb,GAAqB,CAAC,eAAD,CAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB5B,YAAjB","sourcesContent":["let Declaration = require('../declaration')\nlet {\n  parseTemplate,\n  warnMissedAreas,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils')\n\nclass GridTemplate extends Declaration {\n  /**\n   * Translate grid-template to separate -ms- prefixed properties\n   */\n  insert (decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {\n      return undefined\n    }\n\n    let gap = getGridGap(decl)\n\n    /**\n     * we must insert inherited gap values in some cases:\n     * if we are inside media query && if we have no grid-gap value\n     */\n    let inheritedGap = inheritGridGap(decl, gap)\n\n    let { rows, columns, areas } = parseTemplate({\n      decl,\n      gap: inheritedGap || gap\n    })\n\n    let hasAreas = Object.keys(areas).length > 0\n    let hasRows = Boolean(rows)\n    let hasColumns = Boolean(columns)\n\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    })\n\n    warnMissedAreas(areas, decl, result)\n\n    if ((hasRows && hasColumns) || hasAreas) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: rows,\n        raws: {}\n      })\n    }\n\n    if (hasColumns) {\n      decl.cloneBefore({\n        prop: '-ms-grid-columns',\n        value: columns,\n        raws: {}\n      })\n    }\n\n    return decl\n  }\n}\n\nGridTemplate.names = ['grid-template']\n\nmodule.exports = GridTemplate\n"]},"metadata":{},"sourceType":"script"}