{"ast":null,"code":"let browserslist = require('browserslist');\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1);\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android'\n};\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`;\n  if (note) out += ' *';\n  out += ': ';\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ');\n  out += '\\n';\n  return out;\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected';\n  }\n\n  let versions = {};\n\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ');\n    let name = parts[0];\n    let version = parts[1];\n    name = NAMES[name] || capitalize(name);\n\n    if (versions[name]) {\n      versions[name].push(version);\n    } else {\n      versions[name] = [version];\n    }\n  }\n\n  let out = 'Browsers:\\n';\n\n  for (let browser in versions) {\n    let list = versions[browser];\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a));\n    out += `  ${browser}: ${list.join(', ')}\\n`;\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected);\n  let round = Math.round(coverage * 100) / 100.0;\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`;\n  let atrules = [];\n\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes));\n    }\n  }\n\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`;\n  }\n\n  let selectors = [];\n\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes));\n    }\n  }\n\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`;\n  }\n\n  let values = [];\n  let props = [];\n  let hadGrid = false;\n\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0;\n      if (grid) hadGrid = true;\n      props.push(prefix(name, data.prefixes, grid));\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue;\n    }\n\n    for (let value of data.values) {\n      let grid = value.name.includes('grid');\n      if (grid) hadGrid = true;\n      let string = prefix(value.name, value.prefixes, grid);\n\n      if (!values.includes(string)) {\n        values.push(string);\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`;\n  }\n\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`;\n  }\n\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n';\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out += \"\\nAwesome! Your browsers don't require any vendor prefixes.\" + '\\nNow you can remove Autoprefixer from build steps.';\n  }\n\n  return out;\n};","map":{"version":3,"sources":["/home/silas/Desktop/Program/goldenOwl/TrainingGit/node_modules/autoprefixer/lib/info.js"],"names":["browserslist","require","capitalize","str","slice","toUpperCase","NAMES","ie","ie_mob","ios_saf","op_mini","op_mob","and_chr","and_ff","and_uc","prefix","name","prefixes","note","out","map","i","replace","join","module","exports","browsers","selected","length","versions","browser","parts","split","version","push","list","sort","a","b","parseFloat","coverage","round","Math","atrules","add","data","selectors","selector","values","props","hadGrid","grid","indexOf","Array","isArray","value","includes","string"],"mappings":"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","sourcesContent":["let browserslist = require('browserslist')\n\nfunction capitalize (str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android'\n}\n\nfunction prefix (name, prefixes, note) {\n  let out = `  ${name}`\n  if (note) out += ' *'\n  out += ': '\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ')\n  out += '\\n'\n  return out\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected'\n  }\n\n  let versions = {}\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ')\n    let name = parts[0]\n    let version = parts[1]\n\n    name = NAMES[name] || capitalize(name)\n    if (versions[name]) {\n      versions[name].push(version)\n    } else {\n      versions[name] = [version]\n    }\n  }\n\n  let out = 'Browsers:\\n'\n  for (let browser in versions) {\n    let list = versions[browser]\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a))\n    out += `  ${browser}: ${list.join(', ')}\\n`\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected)\n  let round = Math.round(coverage * 100) / 100.0\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`\n\n  let atrules = []\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes))\n    }\n  }\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`\n  }\n\n  let selectors = []\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes))\n    }\n  }\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`\n  }\n\n  let values = []\n  let props = []\n  let hadGrid = false\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0\n      if (grid) hadGrid = true\n      props.push(prefix(name, data.prefixes, grid))\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid')\n      if (grid) hadGrid = true\n      let string = prefix(value.name, value.prefixes, grid)\n      if (!values.includes(string)) {\n        values.push(string)\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`\n  }\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n'\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out +=\n      \"\\nAwesome! Your browsers don't require any vendor prefixes.\" +\n      '\\nNow you can remove Autoprefixer from build steps.'\n  }\n\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}